{"pageProps":{"toc":[{"content":"標準化","slug":"標準化","lvl":2,"i":0},{"content":"データリーケージ","slug":"データリーケージ","lvl":2,"i":1},{"content":"状況","slug":"状況","lvl":3,"i":2},{"content":"考察","slug":"考察","lvl":3,"i":3},{"content":"適正な loss 関数をわかっていない","slug":"適正な-loss-関数をわかっていない","lvl":2,"i":4},{"content":"データの選定を誤っていた","slug":"データの選定を誤っていた","lvl":3,"i":5},{"content":"Pandas の CSV ロードで`Unnamed: 0`という謎の行が追加されてしまう","slug":"pandas-の-csv-ロードでunnamed-0という謎の行が追加されてしまう","lvl":3,"i":6}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"機械学習初心者の私が、やってしまったミスを集めておく。\\nいつか自分の助けになることを期待しているのと、\\n同じ境遇の人の助けになれば嬉しい。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"標準化\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#標準化\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"標準化\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ボストンハウシングデータセットのような推定問題を解いている際、\", _jsx(_components.code, {\n        children: \"Sequential()\"\n      }), \"モデルを使っており、どうしてもどうしても R2 値が上がらなかった。\\n３時間くらい悩んだ結果、標準化すると良いらしく、それによって\", _jsx(_components.code, {\n        children: \"R2: 約4.5 -> 約7.8\"\n      }), \"まで向上した。\\n\", _jsx(_components.code, {\n        children: \"DataFrame\"\n      }), \"型のデータであれば、以下のような処理でできるよ！\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-py\",\n      children: _jsxs(_components.code, {\n        className: \"language-py\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"standardization\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"dataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \"\\n\\t\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" key \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"in\"\n        }), \" dataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"keys\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \"\\n\\t\\ts \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" dataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"key\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\\t\\tdataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"key \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"s \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" s\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"min\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"s\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"max\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" s\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"min\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\tdataset_df \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" dataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"fillna\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\t\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" np\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"array\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"dataset_df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" dtype\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"float\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"データリーケージ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#データリーケージ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"データリーケージ\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"状況\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#状況\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"状況\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"トレーニングしたモデルを推定器で推定したところ、推定結果が全て同じ数値になってしまった。\\nこの原因は、\", _jsx(_components.code, {\n        children: \"x_train\"\n      }), \"に\", _jsx(_components.code, {\n        children: \"y_train\"\n      }), \"のデータが含まれていたことにある。\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"考察\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#考察\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"考察\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"y_train\"\n      }), \"のデータを持ってさえいれば、それだけで推定ができる。そんなモデルで\", _jsx(_components.code, {\n        children: \"y_train\"\n      }), \"がなければ、他のパラメータがどんな数値であろうと推定結果が同じ数値になってしまう。\\nトレーニングデータに間違えて答えを教えてしまうなんて、、、こんな恥ずかしいことはない。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"適正な-loss-関数をわかっていない\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#適正な-loss-関数をわかっていない\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"適正な loss 関数をわかっていない\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"はじめての機械学習で回帰問題に取り組んでいる時、ネットの海に浮かんでいるコード達を参考にしていたところ、\", _jsx(_components.code, {\n        children: \"model::fit()\"\n      }), \"をしても全然よくならなかった。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"その原因として、loss 関数は複数種の API が提供されているのだが、回帰問題を解いているときにそれらを知らずに、分類問題用のクロスエントロピーという loss 関数を使ってしまっていた。\\nその結果、何度試しても学習できずに時間を浪費した。以下のように二乗平均誤差を用いると良い。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-py\",\n      children: _jsxs(_components.code, {\n        className: \"language-py\",\n        children: [\"model\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"compile\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"\\n\\toptimizer\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'adam'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\\tloss\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'mean_squared_error'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# 'mse'でも可\"\n        }), \"\\n\\tmetrics\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'mae'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'mse'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"データの選定を誤っていた\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#データの選定を誤っていた\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"データの選定を誤っていた\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"深層学習を全く知らなかった時は、「機械学習はとりあえずデータを突っ込めばイケル！」と思い込んでいた。\\nしかし、実際に学習をしてみたところ、細かいチューニングが必要だということに気付かされた。\\n特に、回帰問題における相関を目視確認し、手動でデータを除去するのが推定精度を高めるコツだということがわかった。\\n\", _jsx(_components.code, {\n        children: \"pandas\"\n      }), \"パッケージの\", _jsx(_components.code, {\n        children: \"DataFrame\"\n      }), \"型であれば、相関を算出するメソッドが提供されている。以下のコードで簡単に確認することができる。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-py\",\n      children: _jsxs(_components.code, {\n        className: \"language-py\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"import\"\n        }), \" pandas \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"as\"\n        }), \" pd\\n\\ndf \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" pd\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"read_csv\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'dataset.csv'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\ndf_corr \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" df\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"corr\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\npd\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"set_option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'display.max_columns'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"None\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\npd\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"set_option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'display.max_rows'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"None\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\ndf_corr \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" df_corr\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'ans'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"sort_values\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" key\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" val \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"in\"\n        }), \" df_corr\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"items\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \"\\n\\t\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"print\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"key\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" val\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pandas-の-csv-ロードでunnamed-0という謎の行が追加されてしまう\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#pandas-の-csv-ロードでunnamed-0という謎の行が追加されてしまう\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Pandas の CSV ロードで\", _jsx(_components.code, {\n        children: \"Unnamed: 0\"\n      }), \"という謎の行が追加されてしまう\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"前処理をしたデータを CSV ファイルで保存し、それをロードして学習させていたのだが、（それまでは正常動作していたが）ある時から急に\", _jsx(_components.code, {\n        children: \"Unnamed: 0\"\n      }), \"という名前の行が追加され、データリーケージのような挙動をするようになっていた。\\n前処理プログラム内でのデータを目視確認しても、該当する行は存在しないため、謎であった。\\n以下のように、インデックスの行を指定することで無事解決することができた。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-py\",\n      children: _jsxs(_components.code, {\n        className: \"language-py\",\n        children: [_jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# 変更前\"\n        }), \"\\ndf \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" pd\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"read_csv\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'dataset.csv'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# 変更後\"\n        }), \"\\ndf \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" pd\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"read_csv\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'dataset.csv'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" index_col\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Deep Learningのやらかし集","date":"2020-07-20T16:17:37+09:00","description":"ミスをまとめるページ","tags":["tensorflow","python"]}},"__N_SSG":true}