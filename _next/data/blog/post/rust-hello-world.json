{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"Rust とは","slug":"rust-とは","lvl":2,"i":1},{"content":"Rust の特徴","slug":"rust-の特徴","lvl":2,"i":2},{"content":"インストール","slug":"インストール","lvl":2,"i":3},{"content":"Hello World する！","slug":"hello-world-する","lvl":2,"i":4},{"content":"プロジェクト作成","slug":"プロジェクト作成","lvl":3,"i":5},{"content":"デバッグ実行","slug":"デバッグ実行","lvl":3,"i":6},{"content":"ビルド","slug":"ビルド","lvl":3,"i":7},{"content":"クリーンアップ","slug":"クリーンアップ","lvl":3,"i":8},{"content":"おわりに","slug":"おわりに","lvl":2,"i":9},{"content":"参考","slug":"参考","lvl":2,"i":10}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最近，Rust が好きなので，自分でもなにか文書を書きたいと思い，紹介・インストール・Hello World までを日本語で１ページにまとめてみた．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"書き出し部分は\", _jsx(_components.a, {\n        href: \"https://www.rust-lang.org\",\n        children: \"公式ドキュメント\"\n      }), \"を参照．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"rust-とは\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#rust-とは\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Rust とは\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rust とは，\", _jsx(_components.a, {\n        href: \"https://www.rust-lang.org\",\n        children: \"公式\"\n      }), \"によると，\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Rust\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A language empowering everyone\\nto build reliable and efficient software.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"とされており，「全ての人に信頼性のある効率的なソフトウェアを構築する力を与える言語」といったところだろうか（拙訳）．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"rust-の特徴\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#rust-の特徴\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Rust の特徴\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"システムプログラミング言語でありながらメモリ安全性を実現する言語と紹介されることが多く，ガベージコレクション無しでメモリ安全性を保証している．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"パフォーマンス面において，高速かつメモリ効率がよく，それを求められるサービスや組込みシステムなどに向いている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"高信頼性面は，リッチな型システムと Ownership モデルのメモリ安全性保証によって実現されている．多くの種類のバグはコンパイル時に発見することが出来る．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"インストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#インストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"インストール\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://www.rust-lang.org/tools/install\",\n        children: \"公式のインストールガイド\"\n      }), \"にインストールコマンドが載っている．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"macOS, Linux, Unix 系 OS では，以下のコマンドでインストール可能．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"curl\"\n        }), \" --proto \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'=https'\"\n        }), \" --tlsv1.2 -sSf https://sh.rustup.rs \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sh\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"必要に応じて， \", _jsx(_components.code, {\n        children: \"~/.cargo/bin\"\n      }), \"にパスを通す．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"インストール確認コマンドは以下．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ rustc --version\\n$ cargo --version\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hello-world-する\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hello-world-する\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Hello World する！\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"プロジェクト作成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#プロジェクト作成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"プロジェクト作成\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"カッコつけて HelloWorld すると書いたものの，Cargo を使うと 10 秒くらいで HelloWorld 出来てしまう．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下のコマンドを実行する．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ cargo new hello_world\\n$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"cd\"\n        }), \" hello_world \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Rustプロジェクトに移動\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"デバッグ実行\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#デバッグ実行\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"デバッグ実行\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"これにより，カレント配下に\", _jsx(_components.code, {\n        children: \"hello_world\"\n      }), \"ディレクトリが作成され，これが Rust プロジェクトとなる．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ cargo run      \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Debug実行\"\n        }), \"\\n   Compiling hello_world v0.1.0 \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"/xxx/yyy/zzz/hello_world\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n    Finished dev \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"unoptimized + debuginfo\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" target\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"s\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), \".16s\\n     Running \", _jsxs(_components.span, {\n          className: \"token variable\",\n          children: [_jsx(_components.span, {\n            className: \"token variable\",\n            children: \"`\"\n          }), \"target/debug/hello_world\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"`\"\n          })]\n        }), \"\\nHello, world\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"hello_world/target\"\n      }), \"には，依存パッケージやビルド結果が格納される．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ビルド\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ビルド\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ビルド\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここまでで，Debug 実行が出来たので，次は HelloWorld を Release ビルドしたい．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ cargo build --release \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# ./target/release/hello_world が実行バイナリになる\"\n        }), \"\\n$ ./target/release/hello_world\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"クリーンアップ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#クリーンアップ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"クリーンアップ\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最後に，実行用のファイル達 (\", _jsx(_components.code, {\n        children: \"./target\"\n      }), \"にあるやつ)をキレイにして，HelloWorld を終了としたい．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ cargo clean \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# ./target そのものが削除される\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"バックエンドでたくさん使いたい言語ですよね！\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"感覚で使ってしまっている面が多々あったので，しっかりと開発できるようにしていきたいです．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://www.rust-lang.org\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"RustのHello Worldをする！","date":"2022-09-04T21:36:30","description":"Rust好きです","tags":["rust","tutorial"]}},"__N_SSG":true}