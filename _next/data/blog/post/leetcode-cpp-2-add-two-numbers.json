{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"コード全体","slug":"コード全体","lvl":2,"i":1},{"content":"解説","slug":"解説","lvl":2,"i":2}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ListNode* l1\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"ListNode* l2\"\n      }), \"のそれぞれを１つの数値として考え、それらの和を求める\", _jsx(_components.a, {\n        href: \"https://leetcode.com/problems/add-two-numbers/\",\n        children: \"問題\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この時、リストの値は反転したものと考える。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<例>\\nL1 : 2 -> 4 -> 3\\nL2 : 5 -> 6 -> 4\\nResult : 7 -> 0 -> 8\\nNote : 342 + 465 = 807\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"コード全体\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コード全体\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コード全体\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"addTwoNumbers\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" createdListNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"new\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" createdListHead \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" hasNext \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" node\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" node \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&&\"\n        }), \" node\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" pushBack \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" newNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"new\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" newNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" moveUp \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"pushBack\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"pushBack\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"10\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"while\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"||\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"10\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"moveUp\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"hasNext\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&&\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"hasNext\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"break\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"pushBack\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n    createdListNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" l1 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" l2 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" createdListHead\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"解説\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#解説\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"解説\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"は、加算された数値を格納する連結リスト。\\n\", _jsx(_components.code, {\n        children: \"createdListHead\"\n      }), \"は、戻り値のために記憶したヘッド。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"addTwoNumbers\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" createdListNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"new\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" createdListHead \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"hasNext()\"\n      }), \"は、「Nodeが次のNodeを持っているか？」を返すラムダ式。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" hasNext \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" node\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" node \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&&\"\n        }), \" node\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"pushBack()\"\n      }), \"は、\", _jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"に次のNodeを追加するラムダ式。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" pushBack \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    ListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" newNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"new\"\n        }), \" ListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" newNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"moveUp()\"\n      }), \"は、\", _jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"の桁上げをするラムダ式。\\nこの時、\", _jsx(_components.code, {\n        children: \"pushBack()\"\n      }), \"により次のNodeを追加しつつ桁上げする。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"auto\"\n        }), \" moveUp \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"createdListNode\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"pushBack\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"pushBack\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"10\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"l1\"\n      }), \"、\", _jsx(_components.code, {\n        children: \"l2\"\n      }), \"のどちらかでも値が存在する間ループし続ける。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"while\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"||\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"l1\"\n      }), \"および\", _jsx(_components.code, {\n        children: \"l2\"\n      }), \"に値が存在する場合は、\", _jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"に値を加算する。この時、桁上げは考慮しない。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+=\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"の値が10以上である時、桁上げ処理を行う。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"val \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"10\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"moveUp\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"桁上げを必要としない場合は、\", _jsx(_components.code, {\n        children: \"createdListNode\"\n      }), \"に次のNodeを追加する。その時、\", _jsx(_components.code, {\n        children: \"l1\"\n      }), \"・\", _jsx(_components.code, {\n        children: \"l2\"\n      }), \"ともに次のNodeが存在しない場合はループ終了。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"hasNext\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&&\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"hasNext\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"break\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"pushBack\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"連結リストを次へ進める。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"    createdListNode \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" createdListNode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" l1 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" l1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"l2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" l2 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" l2\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"->\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"作成した加算済み連結リストを返す。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [\"  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" createdListHead\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"Leetcode 2 Add Two Numbers","date":"2020-05-23T23:25:53+09:00","description":"連結リストを１つの数値と考えた時の、２数の和を求める問題","tags":["leetcode","c++"]}},"__N_SSG":true}