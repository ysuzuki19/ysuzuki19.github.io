{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"システム要件","slug":"システム要件","lvl":2,"i":1},{"content":"古い Ubuntu をアンインストールする","slug":"古い-ubuntu-をアンインストールする","lvl":2,"i":2},{"content":"インストールする","slug":"インストールする","lvl":2,"i":3},{"content":"動作確認","slug":"動作確認","lvl":2,"i":4},{"content":"おわりに","slug":"おわりに","lvl":2,"i":5},{"content":"参考","slug":"参考","lvl":2,"i":6}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker は開発をする上で非常に有用な技術であり，デプロイを便利にするだけでなく，ローカルでの開発環境構築を簡素にしてくれる．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"例えば，「あの DB 使いたいなぁ」，「DB をリセットしよう」となった時に，各ソフトウェアに対するコマンドを調べる必要がなく，Docker コマンドを打つだけで環境の準備，破棄を簡単に行うことが出来る．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでは，(2022/03/19 現在)公式のドキュメントから，Docker の Ubuntu へのインストール方法を紹介する．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"システム要件\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#システム要件\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"システム要件\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ubuntu 18.04LTS, 20.04LTS, 21.04, 21.10\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"古い-ubuntu-をアンインストールする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#古い-ubuntu-をアンインストールする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"古い Ubuntu をアンインストールする\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"apt 等のパッケージマネージャでもインストール可能であるが，そちらでは古いバージョンがインストールされる．そのため，既にインストールされているものはアンインストールする必要がある．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" remove \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"docker\"\n        }), \" docker-engine docker.io containerd runc\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"インストールする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#インストールする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"インストールする\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" update\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" ca-certificates \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"curl\"\n        }), \" gnupg lsb-release\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"curl\"\n        }), \" -fsSL https://download.docker.com/linux/ubuntu/gpg \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\\n$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"\\\\\"\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"deb [arch=\", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"$(\"\n            }), \"dpkg --print-architecture\", _jsx(_components.span, {\n              className: \"token variable\",\n              children: \")\"\n            })]\n          }), \" signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\\\\n  \", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"$(\"\n            }), \"lsb_release -cs\", _jsx(_components.span, {\n              className: \"token variable\",\n              children: \")\"\n            })]\n          }), \" stable\\\"\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"tee\"\n        }), \" /etc/apt/sources.list.d/docker.list \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" /dev/null\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt-get\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" docker-ce docker-ce-cli containerd.io\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"動作確認\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#動作確認\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"動作確認\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのままの場合は Admin での実行が必要．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"docker\"\n        }), \" run hello-world\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://docs.docker.com/engine/install/linux-postinstall/\",\n        children: \"sudo なしで実行できる設定\"\n      }), \"もすると利便性は向上．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://docs.docker.com/engine/install/ubuntu/\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"ubuntuにDockerをセットアップする","date":"2022-03-19T19:24:52","description":"公式のやり方で最新版をセットアップします","tags":["ubuntu","docker","setup"]}},"__N_SSG":true}