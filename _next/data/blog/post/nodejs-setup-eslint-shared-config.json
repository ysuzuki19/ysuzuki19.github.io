{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"npm パッケージの準備","slug":"npm-パッケージの準備","lvl":2,"i":1},{"content":"リポジトリ準備","slug":"リポジトリ準備","lvl":3,"i":2},{"content":"トークンの設置","slug":"トークンの設置","lvl":3,"i":3},{"content":"リポジトリから不要物を削除","slug":"リポジトリから不要物を削除","lvl":3,"i":4},{"content":"自分用のカスタム eslintrc の配置","slug":"自分用のカスタム-eslintrc-の配置","lvl":3,"i":5},{"content":".eslintrc が公開されるようにする","slug":"eslintrc-が公開されるようにする","lvl":3,"i":6},{"content":"必須な変更箇所","slug":"必須な変更箇所","lvl":4,"i":7},{"content":"オプショナルな変更箇所","slug":"オプショナルな変更箇所","lvl":4,"i":8},{"content":"publish","slug":"publish","lvl":3,"i":9},{"content":"使い方","slug":"使い方","lvl":3,"i":10},{"content":"おわりに","slug":"おわりに","lvl":2,"i":11},{"content":"参考","slug":"参考","lvl":2,"i":12}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\",\n    pre: \"pre\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"参考となる最終形は\", _jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/eslint-config\",\n        children: \"こちら\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最近，ESLint の設定を，自分でカスタムするようになってきた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これにより，自分のコーディングルールを自分のプロジェクト内で共通化しつつ，手動フォーマッティングによる開発速度の低下を防いでくれるようになった．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ESLint の設定を自分でカスタムすることでこれらの恩恵を得られる一方，プロジェクト間で同じルールを設定していないのは開発者体験を低下させてしまう．そのため，古いルールが適用されているプロジェクトの開発に着手する際に，最新の\", _jsx(_components.code, {\n        children: \".eslintrc\"\n      }), \"を探し出して，それをコピペするといった作業が必要になるようになってしまった．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは「よしこれを開発しよう！」となったときの出鼻をくじかれる作業となるため，最小の時間でこれを行えるようにしたかった．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そこで調べたところ，ESLint の\", _jsx(_components.code, {\n        children: \"extends\"\n      }), \"には，ルールの継承のような役割があり，npm パッケージから設定を引き継げるとのこと．そして，それを準備し，実装した．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"同じような事を考えている方は多くいると思うため，ここで知見を記しておく．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"npm-パッケージの準備\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#npm-パッケージの準備\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"npm パッケージの準備\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"リポジトリ準備\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リポジトリ準備\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リポジトリ準備\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"以前作成した\", _jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/npm-package-template\",\n        children: \"npm パッケージ開発用テンプレート\"\n      }), \"からリポジトリを作成する（手順は少し変わってしまいますが，ここはどのような方法でリポジトリを準備しても構いません）．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"トークンの設置\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#トークンの設置\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"トークンの設置\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/post/npm-typescript-package-template#%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%82%92%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%AB%E8%A8%AD%E5%AE%9A\",\n        children: \"こちら\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"リポジトリから不要物を削除\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リポジトリから不要物を削除\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リポジトリから不要物を削除\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まずは以下を削除．\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"rollup.config.js\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"index.ts\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"index.test.ts\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"tsconfig.json\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"自分用のカスタム-eslintrc-の配置\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#自分用のカスタム-eslintrc-の配置\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"自分用のカスタム eslintrc の配置\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \".eslintrc\"\n      }), \"を作成し，ここに自分用の設定をコピペする．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"この時，依存している\", _jsx(_components.code, {\n        children: \"eslint\"\n      }), \"系のパッケージも併せてインストールする．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"eslintrc-が公開されるようにする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#eslintrc-が公開されるようにする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \".eslintrc が公開されるようにする\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"package.json\"\n      }), \"の設定を行う．\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"必須な変更箇所\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#必須な変更箇所\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"必須な変更箇所\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| 箇所           | 説明                                                                                           |\\n| -------------- | ---------------------------------------------------------------------------------------------- |\\n| name           | 自分のパッケージ名に変更する(scoped-package で\", _jsx(_components.code, {\n        children: \"@<your-id>/eslint-config\"\n      }), \" という命名がおすすめ) |\\n| main           | \\\"./.eslintrc\\\"にする                                                                            |\\n| module         | \\\"./.eslintrc\\\"にする                                                                            |\\n| files          | \\\".eslintrc\\\"にする                                                                              |\\n| repository.url |                                                                                                |\\n| author         |                                                                                                |\\n| bugs.url       |                                                                                                |\\n| homepage       |                                                                                                |\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"オプショナルな変更箇所\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#オプショナルな変更箇所\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"オプショナルな変更箇所\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| 箇所        | 説明 |\\n| ----------- | ---- |\\n| description |      |\\n| keywords    |      |\\n| license     |      |\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"publish\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#publish\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"publish\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/post/npm-typescript-package-template#publish\",\n        children: \"こちら\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"自分の npm アカウントに移動し，パッケージが公開されている事を確認する．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"使い方\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#使い方\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"使い方\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上で変更した\", _jsx(_components.code, {\n        children: \"name\"\n      }), \"の項目に書いた名前でパッケージが公開されているので，そ設定を導入したいプロジェクトで，以下を実行．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" i -D \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"your-package\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"その後，プロジェクト内の\", _jsx(_components.code, {\n        children: \".eslintrc\"\n      }), \"に以下を追記する．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \".eslintrc\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  extends\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"<your-package>\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(再掲)最終形は\", _jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/eslint-config\",\n        children: \"こちら\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"npm up\"\n      }), \"をするだけで最新のカスタム設定を適用できるのは，かなり便利ですね！\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://eslint.org/docs/developer-guide/shareable-configs\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"ESLintの設定の手間からの解放","date":"2022-05-27T23:31:24","description":"自分用設定をnpmに公開することで，頑張ってコピペする手間を省きます","tags":["nodejs","npm","eslint","setup"]}},"__N_SSG":true}