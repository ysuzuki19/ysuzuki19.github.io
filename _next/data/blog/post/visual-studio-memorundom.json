{"pageProps":{"toc":[{"content":"なんかプログラムが動かない？","slug":"なんかプログラムが動かない","lvl":3,"i":0},{"content":"ライブラリが存在しないと言われる","slug":"ライブラリが存在しないと言われる","lvl":3,"i":1},{"content":"E0870 マルチバイト文字のシーケンスが無効です","slug":"e0870-マルチバイト文字のシーケンスが無効です","lvl":3,"i":2},{"content":"D8016 コマンドラインオプション`/ZI`と`/Gy-`は同時に指定できません","slug":"d8016-コマンドラインオプションziとgy-は同時に指定できません","lvl":3,"i":3},{"content":"D9035 オプション'Gm'の使用は現在推奨されていません。今後のバージョンからは削除されます。","slug":"d9035-オプションgmの使用は現在推奨されていません今後のバージョンからは削除されます","lvl":3,"i":4},{"content":"C2001 定数が２行目に続いています","slug":"c2001-定数が２行目に続いています","lvl":3,"i":5},{"content":"C4828 オフセット 0x?? から始まる、現在のソースの文字セット（コードページ 65001）では使用できない文字がファイルに含まれています。","slug":"c4828-オフセット-0x-から始まる現在のソースの文字セットコードページ-65001では使用できない文字がファイルに含まれています","lvl":3,"i":6},{"content":"デバッグ実行時に、コードの変更が反映されない","slug":"デバッグ実行時にコードの変更が反映されない","lvl":3,"i":7},{"content":"ビルドツールが見つからない問題","slug":"ビルドツールが見つからない問題","lvl":3,"i":8},{"content":"思ったこと","slug":"思ったこと","lvl":2,"i":9}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"VisualStudioを使う必要があるので、そこで知ったことを逐次メモしておくことにした。ガチ初心者なので、同じ境遇の方の役に立ったら嬉しい。\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"なんかプログラムが動かない\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#なんかプログラムが動かない\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"なんかプログラムが動かない？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"「デバッグ実行→停止」をしても何も起こらない。\\n↓\\n「停止」ボタンではなく「中断」ボタンを押したら原因がわかった。\\n\", _jsx(_components.code, {\n        children: \"xxx.dll\"\n      }), \"が足りないようであった。\\n「中断」した時に出てきた画面をぽちぽちしてたら進んだ。\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ライブラリが存在しないと言われる\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ライブラリが存在しないと言われる\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ライブラリが存在しないと言われる\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"パスを通す必要がある。パスとは、ライブラリがどこに置いてあるのかを教えるものだと解釈している。\\n以下に、パスを指定する。\", _jsx(_components.code, {\n        children: \"C¥…¥…\"\n      }), \"みたいなやつ！\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"デバッグ　→ …のプロパティ　→　C/C++ → 全般　→ 追加のインクルードディレクトリ　→ （パスを追加）\\nデバッグ　→ …のプロパティ　→ リンカー　→ 全般　→ 追加のインクルードディレクトリ　→ （パスを追加）\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"e0870-マルチバイト文字のシーケンスが無効です\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#e0870-マルチバイト文字のシーケンスが無効です\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"E0870 マルチバイト文字のシーケンスが無効です\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通常、以下で除去可能のようである。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"デバッグ　→ …のプロパティ　→ 構成プロパティ　→ 詳細　→ 文字セット　→ 「マルチバイト文字セットを使用する」\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"私の場合は、これだけではエラーを除去できなかった。\\nそこで、該当コードの文字化け前のものを別のエディタで開いたところ、文字化けしないことが確認されたので、そちらから手動でコピペしたらうまく動作した。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原因を自分なりに考えたところ、「文字化けした状態を保存してしまったために適切な文字コードで読み込めなくなった」のかなと思った。\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"d8016-コマンドラインオプションziとgy-は同時に指定できません\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#d8016-コマンドラインオプションziとgy-は同時に指定できません\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"D8016 コマンドラインオプション\", _jsx(_components.code, {\n        children: \"/ZI\"\n      }), \"と\", _jsx(_components.code, {\n        children: \"/Gy-\"\n      }), \"は同時に指定できません\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これにかんして、エラ〜コードのページへ飛んでも、解消方法がイマイチわからなかった。\\nぽちぽち設定を見たところ、\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"プロジェクト　→ プロパティ　→ C/C++ → コード生成　→ 関数レベルでリンクする　→ 「はい(/Gy)」\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"d9035-オプションgmの使用は現在推奨されていません今後のバージョンからは削除されます\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#d9035-オプションgmの使用は現在推奨されていません今後のバージョンからは削除されます\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"D9035 オプション'Gm'の使用は現在推奨されていません。今後のバージョンからは削除されます。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"エラーではないが、今後のバージョンからは削除されるということで、設定を変更した。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"プロジェクト　→ プロパティ　→ C/C++ → コード生成　→ 宰相リビルドを有効にする　→ 「いいえ(/Gm-)」\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"c2001-定数が２行目に続いています\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#c2001-定数が２行目に続いています\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"C2001 定数が２行目に続いています\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"マイクロソフトのエラー説明ページを見たが、エラーの原因はわからなかった。\\nそこで、文字コードを\", _jsx(_components.code, {\n        children: \"utf-8\"\n      }), \"にした。\\nその設定では、ビルドに時間がかかっているかと思いきや、１分ほどしてVisualStudioの応答がなくなった。無念。\\nそのままプログラムを再起動したら文字化け状態でプログラムが起動できた。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"プロジェクト　→ プロパティ　→ C/C++ → コマンドラインオプション　→ 追加「/utf-8」\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"c4828-オフセット-0x-から始まる現在のソースの文字セットコードページ-65001では使用できない文字がファイルに含まれています\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#c4828-オフセット-0x-から始まる現在のソースの文字セットコードページ-65001では使用できない文字がファイルに含まれています\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"C4828 オフセット 0x?? から始まる、現在のソースの文字セット（コードページ 65001）では使用できない文字がファイルに含まれています。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"なんだか、日本語の読み取りがおかしいみたい。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"日本語を使うのをやめた\\nライブラリに対して、膨大な数の警告が表示されるのが嫌だったので、当警告を指定して非表示にした（本来はやるべきではない。長期間コードを扱う場合は、正式に対処すべきである。）\\nプロジェクト　→ プロパティ　→ C/C++ → 指定の警告を無効にする　→ 「4828」\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"デバッグ実行時にコードの変更が反映されない\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#デバッグ実行時にコードの変更が反映されない\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"デバッグ実行時に、コードの変更が反映されない\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"どんなにコードを確認しても思った通りの挙動をしないと悩んでいたら、VisualStudioの仕様（？）のようである。\\nどうやら、リビルドかなんかがおかしい気がしたので、以下を押したら訳もわからず解決した。\\n部分コンパイルとかが悪さしているのかなぁ・・・\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"ビルド　→ ソリューションのクリーン\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ビルドツールが見つからない問題\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ビルドツールが見つからない問題\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ビルドツールが見つからない問題\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"エラー文は以下．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"The build tools for vXXX (Platform Toolset = 'vXXX') cannot be found.\\n......\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"指定されたビルドツールが見つからないと指摘されているので，以下の手順で指定ビルドツールを変更するとよい．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"プロジェクト → プロパティ　→ 構成プロパティ　→ 全般　→ プラットフォーム ツールセット　→　「（インストールされていません）と書かれていないバージョンに設定」\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"思ったこと\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#思ったこと\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"思ったこと\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"IDEってはじめて使ったけど、めっちゃいいやつ！！\\n特に、VisualStudioの場合はエラーコードを細分化してくれてて、IDE上に表示されたエラーコードをクリックしたら該当ヘルプページをブラウザで開いてくれるのがナイス！\\nただ、何も設定していない部分でエラーを起こすのはやめてほしい・・・\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"Visual Studio の備忘録","date":"2020-06-22T16:37:29+09:00","description":"今は更新していません","tags":["vc++","visualstudio","windows"]}},"__N_SSG":true}