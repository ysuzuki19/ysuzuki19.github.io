{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"まず前提として","slug":"まず前提として","lvl":2,"i":1},{"content":"全般","slug":"全般","lvl":2,"i":2},{"content":"ファイルリストへ移動 (左部)","slug":"ファイルリストへ移動-左部","lvl":3,"i":3},{"content":"エディタ部へ移動","slug":"エディタ部へ移動","lvl":3,"i":4},{"content":"ターミナルへ移動（を開く）","slug":"ターミナルへ移動を開く","lvl":3,"i":5},{"content":"ターミナルを横分割","slug":"ターミナルを横分割","lvl":3,"i":6},{"content":"ファイル名変更","slug":"ファイル名変更","lvl":3,"i":7},{"content":"編集ファイル選択","slug":"編集ファイル選択","lvl":3,"i":8},{"content":"vscode-vim 用","slug":"vscode-vim-用","lvl":2,"i":9},{"content":"縦スプリット","slug":"縦スプリット","lvl":3,"i":10},{"content":"横スプリット","slug":"横スプリット","lvl":3,"i":11},{"content":"スプリットエディタ移動","slug":"スプリットエディタ移動","lvl":3,"i":12},{"content":"おまけ","slug":"おまけ","lvl":2,"i":13},{"content":"ターミナル活用","slug":"ターミナル活用","lvl":3,"i":14},{"content":"おわりに","slug":"おわりに","lvl":2,"i":15},{"content":"参考","slug":"参考","lvl":2,"i":16}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    div: \"div\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"約 1 ヶ月ほど前に，vim を半分引退して，vscode を始めた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"１，２年前に初めて vscode を使ったが，当時はあまりしっくり来ず，vim (+ tmux)をそのまま使った．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最近再び使ったところ，相当使い心地がよく，便利な機能やコマンドがたくさん搭載されていることも知ったので，そのまま vscode を使っている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"大きな理由として，大分 Web 開発に時間を割くようになったので，npm を通して，たくさんのライブラリやフレームワークのお世話になっており，文字補完が楽に快適であることが挙げられる．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"まず前提として\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#まず前提として\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"まず前提として\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"vim キーバインドからはもう離れられない．そのため，\", _jsx(_components.code, {\n        children: \"vscode-vim\"\n      }), \"を使うのが大前提である．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ちなみに，Mac や Ubuntu の通常入力では，Emacs 風キーバインドを(カーソルナビゲーション程度で本格的ではないが)愛用している．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"全般\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#全般\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"全般\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ファイルリストへ移動-左部\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ファイルリストへ移動-左部\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ファイルリストへ移動 (左部)\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"どこでも\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"エディタ部へ移動\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#エディタ部へ移動\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"エディタ部へ移動\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"どこでも\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ターミナルへ移動を開く\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ターミナルへ移動を開く\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ターミナルへ移動（を開く）\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"ターミナル上以外で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"`  # C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"S\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"@\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ちなみに，ターミナルを開く，ターミナルへ移動する，ターミナルからエディタへ移動する時も，すべて同じショートカット\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ターミナルを横分割\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ターミナルを横分割\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ターミナルを横分割\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"ターミナル上で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"%\"\n        }), \"  # C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"S\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"5\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ファイル名変更\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ファイル名変更\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ファイル名変更\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"ファイルリスト上で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsx(_components.code, {\n        className: \"language-vim\",\n        children: \"F2\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"つまり，エディタ上で\", _jsx(_components.code, {\n        children: \"C-0 → F2\"\n      }), \"をするとファイル名編集状態に移れる．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"編集ファイル選択\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#編集ファイル選択\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"編集ファイル選択\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"どこでも\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"p\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"C-p\"\n      }), \"で提示されるファイルリストは，最近開いたファイルの一覧である．ここからファイルを選ぶためには，Emacs キーバインドによって上(\", _jsx(_components.code, {\n        children: \"C-p\"\n      }), \")下(\", _jsx(_components.code, {\n        children: \"C-n\"\n      }), \")移動して，エンターで決定する．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"間違えて\", _jsx(_components.code, {\n        children: \"C-p\"\n      }), \"してしまった場合は，非常に厄介であるが，\", _jsx(_components.code, {\n        children: \"Esc\"\n      }), \"で抜けることができる．ファイル編集中であれば，\", _jsx(_components.code, {\n        children: \"Enter\"\n      }), \"でもよく，ターミナル上に移動したければ，上述のターミナルへ移動するショートカットでもよい．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"表にまとめると，以下．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| 目的           | キー  |\\n| -------------- | ----- |\\n| とりあえず脱出 | Esc   |\\n| 編集状態       | Enter |\\n| ターミナル移動 | C-`   |\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"通常，ターミナル上では \", _jsx(_components.code, {\n        children: \"C-p\"\n      }), \"で履歴を遡るため，ショートカットの衝突が非常に厄介．(そのうち，ターミナル上で\", _jsx(_components.code, {\n        children: \"C-p\"\n      }), \"ショートカットを無効にしたい)\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"vscode-vim-用\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#vscode-vim-用\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"vscode-vim 用\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この内容は，vim のこの機能も使えるよーという紹介．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"縦スプリット\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#縦スプリット\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"縦スプリット\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"エディタ上で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"vsplit\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"横スプリット\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#横スプリット\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"横スプリット\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"エディタ上で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"split\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"スプリットエディタ移動\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#スプリットエディタ移動\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"スプリットエディタ移動\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"スプリットされたエディタ上で\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-vim\",\n      children: _jsxs(_components.code, {\n        className: \"language-vim\",\n        children: [\"C\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"w\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"h\"\n        }), \"  # 左へ\\nC\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"w\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"j\"\n        }), \"  # 下へ\\nC\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"w\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"k\"\n        }), \"  # 上へ\\nC\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"w\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"l\"\n        }), \"  # 右へ\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おまけ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おまけ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おまけ\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ターミナル活用\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ターミナル活用\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ターミナル活用\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"個人的には，ターミナルは\", _jsx(_components.code, {\n        children: \"tmux\"\n      }), \"を使うのがおすすめである．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"サードパーティ拡張機能も豊富だし，知れば知るほど便利．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし，これまで愛用してきた vim + tmux から離れ，ターミナルが vscode を開く目的が大きくなるほど，少し寂しさも感じている．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"個人的なvscodeまとめ","date":"2021-06-20T23:23:21","description":"自分が頻繁に使う機能やコマンドやショートカットなどをまとめる","tags":["vscode"]}},"__N_SSG":true}