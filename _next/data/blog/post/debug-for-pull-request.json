{"pageProps":{"toc":[{"content":"環境","slug":"環境","lvl":2,"i":0},{"content":"boost","slug":"boost","lvl":2,"i":1},{"content":"asio","slug":"asio","lvl":3,"i":2},{"content":"io_context","slug":"io_context","lvl":4,"i":3},{"content":"std","slug":"std","lvl":2,"i":4},{"content":"mutex","slug":"mutex","lvl":2,"i":5},{"content":"int, std::size_t","slug":"int-stdsize_t","lvl":2,"i":6},{"content":"override specifier","slug":"override-specifier","lvl":2,"i":7}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"個人開発では自分の PC のみで動作すれば良いのだが、OSS では複数の環境（OS,Compiler 等）で動作する必要がある。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"その時に変更したコードをメモる。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"環境\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#環境\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"環境\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"C++について書く\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"変更点に対する表記は git 風にと書くことにする\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" 変更前\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" 変更後\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"boost\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#boost\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"boost\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"asio\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#asio\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"asio\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"io_context\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#io_context\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"io_context\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"古い\", _jsx(_components.code, {\n        children: \"boost::asio\"\n      }), \"では、\\n\", _jsx(_components.code, {\n        children: \"io_context\"\n      }), \"は存在しない（現在では推奨）。\\nなので、古い boost での動作が必要であれば、以下の変更を加える。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" boost\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"asio\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"io_context io_context_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" boost\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"asio\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"io_servier io_service_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"std\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#std\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"std\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"mutex\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#mutex\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"mutex\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"昔は\", _jsx(_components.code, {\n        children: \"std::mutex\"\n      }), \"がなかったようだ。\\nOSS が\", _jsx(_components.code, {\n        children: \"boost\"\n      }), \"に依存していれば、\", _jsx(_components.code, {\n        children: \"boost::thread\"\n      }), \"を使う。\\n（等値変換ではないかもしれません！）\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" #include \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"boost\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"thread\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"hpp\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"mutable\"\n        }), \" std\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"mutex mtx_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"mutable\"\n        }), \" boost\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"thread mtx_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" std\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"lock_guard\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"std\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"mutex\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"lock\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"mtx_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" boost\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"mutex\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"scoped_lock \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"lock\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"mtx_\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"int-stdsize_t\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#int-stdsize_t\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"int, std::size_t\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"コンパイラオプションによっては、\", _jsx(_components.code, {\n        children: \"int\"\n      }), \"と\", _jsx(_components.code, {\n        children: \"std::size_t\"\n      }), \"の比較ができない。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私の場合は for 文でエラーが発生した。継続条件に\", _jsx(_components.code, {\n        children: \"std::size_t\"\n      }), \"を使っているが、変数を\", _jsx(_components.code, {\n        children: \"int\"\n      }), \"で宣言したためエラー発生した。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"int\"\n        }), \" i\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" i\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"N\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"++\"\n        }), \"i\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"std\", _jsx(_components.span, {\n          className: \"token double-colon punctuation\",\n          children: \"::\"\n        }), \"size_t i\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" i\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"N\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"++\"\n        }), \"i\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"override-specifier\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#override-specifier\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"override specifier\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"コンパイラのバージョン・オプションによっては、\", _jsx(_components.code, {\n        children: \"override specifier\"\n      }), \"を省略してはいけないようだ。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私の場合は\", _jsx(_components.code, {\n        children: \"MacOS\"\n      }), \"でのビルドが通らなかった。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"override\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"プルリクエストのためのデバッグ","date":"2020-09-30T03:29:54+09:00","description":"少量です","tags":["c++","boost","mutex"]}},"__N_SSG":true}