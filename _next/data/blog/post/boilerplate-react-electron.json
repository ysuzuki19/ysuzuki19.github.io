{"pageProps":{"toc":[{"content":"リポジトリ","slug":"リポジトリ","lvl":2,"i":0},{"content":"環境","slug":"環境","lvl":2,"i":1},{"content":"詳細","slug":"詳細","lvl":2,"i":2},{"content":"リポジトリのクローン","slug":"リポジトリのクローン","lvl":3,"i":3},{"content":"依存関係の解決","slug":"依存関係の解決","lvl":3,"i":4},{"content":"Electron で起動","slug":"electron-で起動","lvl":3,"i":5},{"content":"Linux 上でビルドする","slug":"linux-上でビルドする","lvl":3,"i":6},{"content":"mac 上でビルドする","slug":"mac-上でビルドする","lvl":3,"i":7},{"content":"デベロッパーツールを起動する","slug":"デベロッパーツールを起動する","lvl":3,"i":8}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"近頃，気の赴くままに React を用いて Web アプリを作ることが多い．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"今後，デスクトップアプリとして利用したいなと思っており，Electron に注目した．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そこで，React+Electron でアプリを開発するための雛形を作って，Github に公開した．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"リポジトリ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リポジトリ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リポジトリ\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/reactron\",\n        children: \"ここ\"\n      }), \"．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"リポジトリの名前は react と electron を混ぜて reactron と名付けた．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"環境\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#環境\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"環境\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ubuntu20.04 LTS\\nnpm7.5.4\\nnpx7.5.4\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"詳細\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#詳細\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"詳細\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"リポジトリのクローン\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リポジトリのクローン\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リポジトリのクローン\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"git\"\n        }), \" clone https://github.com/ysuzuki19/reactron\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"依存関係の解決\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#依存関係の解決\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"依存関係の解決\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"npm\"\n      }), \"を使ってパッケージを管理しているので，以下のコマンドでパッケージをインストールする．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"electron-で起動\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#electron-で起動\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Electron で起動\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"package.json\"\n      }), \"に Electron 起動用のスクリプトを準備しておいたので，以下のコマンドで Electron で起動できる．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" run electron\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"linux-上でビルドする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#linux-上でビルドする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Linux 上でビルドする\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"package.json\"\n      }), \"に，ビルドコマンドを準備しておいたので，以下のいずれかを実行することでビルドが可能．:w\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" run build-linux  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# linux用のみビルド\"\n        }), \"\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" run build-mac    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# mac用のみビルド\"\n        }), \"\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" run build-win    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# windows用のみビルド\"\n        }), \"\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" run build-all    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# 上記３つ用にビルド\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"mac-上でビルドする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#mac-上でビルドする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"mac 上でビルドする\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Linux ではできなかったが，Mac 上でビルドする場合，\", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \"の以下の行を削除することで，\", _jsx(_components.code, {\n        children: \".dmg\"\n      }), \"にしてくれるので，便利である．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"target\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"tar.gz\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"デベロッパーツールを起動する\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#デベロッパーツールを起動する\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"デベロッパーツールを起動する\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"public/electron.js\"\n      }), \"内の以下の行をアンコメントアウトすると，Electron を起動する際にデベロッパーツールを開いてくれる．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [\"mainWindow\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"webContents\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"openDevTools\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"React+Electronのボイラープレート","date":"2021-04-14T20:17:08+09:00","description":"githubに公開してます","tags":["react","electron","boilerplate"]}},"__N_SSG":true}