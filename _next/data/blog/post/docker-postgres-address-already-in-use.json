{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"何が起こっているのか？","slug":"何が起こっているのか","lvl":2,"i":1},{"content":"確認する","slug":"確認する","lvl":2,"i":2},{"content":"一瞬で解決する（一時的）","slug":"一瞬で解決する一時的","lvl":2,"i":3},{"content":"上述の問題における問題点","slug":"上述の問題における問題点","lvl":2,"i":4},{"content":"永続的な解決策","slug":"永続的な解決策","lvl":2,"i":5},{"content":"おわりに","slug":"おわりに","lvl":2,"i":6},{"content":"参考","slug":"参考","lvl":2,"i":7}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Docker を使っていて，謎の\", _jsx(_components.code, {\n        children: \"address already in use\"\n      }), \"が吐き出され，\", _jsx(_components.code, {\n        children: \"docker ps\"\n      }), \"で確認してもコンテナが起動していないという事象が発生した．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"エラーの全体を見ると，何のコンテナを建てようがエラーは起こると思われるが，今回の私の例では PostgreSQL コンテナで発生した．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"何が起こっているのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何が起こっているのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何が起こっているのか？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"address already in use\"\n      }), \"の通り，「アドレスが既に使われていますよー」という状態である．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"確認する\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#確認する\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"確認する\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私の場合 PostgreSQL で発生したためポートが\", _jsx(_components.code, {\n        children: \"5432\"\n      }), \"であった．そのため，以下のコマンドでポートの仕様状況を確認する．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"netstat\"\n        }), \" -pna \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"|\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"grep\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"5432\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この結果，PostgreSQL がポートを使用していることが分かった．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker とは別で以前インストールしていた PostgreSQL が起動していて，ポートを使用していたためエラーが出ていた．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"一瞬で解決する一時的\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#一瞬で解決する一時的\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"一瞬で解決する（一時的）\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"このような問題を解決するためにやるべきことは，「PostgreSQL を停止する」に尽きる．そこで，以下のコマンドを実行すると停止出来るため，コンテナが起動できる．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ systemctl stop postgresql\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"上述の問題における問題点\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#上述の問題における問題点\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"上述の問題における問題点\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"一時的に\", _jsx(_components.code, {\n        children: \"postgresql\"\n      }), \"を停止してポートを開放したためコンテナは起動されたが，OS 起動時に自動起動の設定になっている場合，再起動したら再度ポートが使えなくなる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"その都度\", _jsx(_components.code, {\n        children: \"postgresql\"\n      }), \"を停止するのは非常に面倒である．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そこで，私の場合ローカルでは開発用途でしか PostgreSQL を使わないため，通常インストールされた PostgreSQL をアンインストールすることにした．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"永続的な解決策\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#永続的な解決策\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"永続的な解決策\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"!!! PostgreSQL のアンインストールに伴ってデータが消失する可能性があります．自己責任でお願いします!!!\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" purge postgresql\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" remove --purge postgressql-*\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"userdel\"\n        }), \" postgres\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ちなみに，\", _jsx(_components.code, {\n        children: \"sudo apt install postgresql\"\n      }), \"のみでは自動起動が行われてしまい，出来なかった．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"やっぱり Docker で走らせたほうがいいな〜\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://stackoverflow.com/questions/37971961/docker-error-bind-address-already-in-use\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://stackoverflow.com/questions/45204070/remove-postgresql-service-from-systemctl-after-upgrade\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://postgresweb.com/uninstall-postgresql-ubuntu2004\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"docker on ubuntuでaddress already in useの解消","date":"2021-12-10T17:45:45","description":"なんかコンテナが起動しない・・・","tags":["docker","container","ubuntu","postgres","error"]}},"__N_SSG":true}