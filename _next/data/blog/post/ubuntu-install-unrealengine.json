{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"動作環境","slug":"動作環境","lvl":2,"i":1},{"content":"手順","slug":"手順","lvl":2,"i":2},{"content":"ブラウザ上での準備","slug":"ブラウザ上での準備","lvl":2,"i":3},{"content":"ソースコードの取得","slug":"ソースコードの取得","lvl":2,"i":4},{"content":"ビルドする","slug":"ビルドする","lvl":2,"i":5},{"content":"インストールする","slug":"インストールする","lvl":2,"i":6},{"content":"おわりに","slug":"おわりに","lvl":2,"i":7},{"content":"参考","slug":"参考","lvl":2,"i":8}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    div: \"div\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ubuntu で Unreal Engine (UE) を用いてゲーム開発の勉強をしていた。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UE を Ubuntu にインストールするためには、Windows や Mac などに比較してインストールが複雑な印象を受けた。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのため、手順を大まかに残すことにした。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"特に、ビルドしたバイナリを Launcher や Files の\", _jsx(_components.code, {\n        children: \".uproject\"\n      }), \"ファイルのクリックから起動できるよう設定まで行う。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"動作環境\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#動作環境\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"動作環境\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Ubuntu 22.04 LTS\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"手順\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#手順\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"手順\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Epic Games アカウントを作成\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.epicgames.com/account/connections\",\n          children: \"EpicGames アカウントのアカウント設定\"\n        }), \"で GitHub を連携\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"EpicGames/developer に参加する\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"GitHub 上のリポジトリからソースコードを取得する\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ビルドする\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"インストールする\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ブラウザ上での準備\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ブラウザ上での準備\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ブラウザ上での準備\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"EpicGames アカウントの作成および、GitHub との連携をする(\", _jsx(_components.a, {\n        href: \"https://www.unrealengine.com/en-US/ue-on-github\",\n        children: \"参考\"\n      }), \")。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"正常に連携が完了すれば、\", _jsx(_components.a, {\n        href: \"https://github.com/EpicGames/UnrealEngine\",\n        children: \"こちら\"\n      }), \"で UnrealEngine のリポジトリを見ることができる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ソースコードの取得\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ソースコードの取得\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ソースコードの取得\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GitHub の Releases からダウンロードしてもいいが、私の場合 Git 管理のままローカルに取得することにした。\\nこのとき、クローンするパスが実質的なインストールパスになるので、注意が必要。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"git\"\n        }), \" clone https://github.com/EpicGames/UnrealEngine.git\\n$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"cd\"\n        }), \" UnrealEngine\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ビルドする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ビルドする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ビルドする\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"make\"\n      }), \"に際しては、\", _jsx(_components.code, {\n        children: \"-j\"\n      }), \"オプション無しで並列化してくれる。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まずはサードパーティライブラリをインストールする。以下コマンドでは、SUCCESS というメッセージが出ることまで確認する\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ ./Setup.sh\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"次に、makefile 関連のファイルを生成と、ショートカットの設定を行う、\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ ./GenerateProjectFiles.sh\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最後に、ビルドする。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"make\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ビルドが完了したら、相対パスで UnrealEditor が実行できることを確かめる。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ ./Engine/Binaries/Linux/UnrealEditor\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ちなみにこのコマンド、初回起動はかなり時間がかかる。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"インストールする\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#インストールする\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"インストールする\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"インストール\"\n      }), \"とはいうものの、UE のバイナリは自身でビルドしたものである上に、よくあるような\", _jsx(_components.code, {\n        children: \"make\"\n      }), \"のインストールオプションがあるわけではない。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実際の UE の起動は、上述したコマンドを実行することで行う。\\nさらに、実は Launcher への登録は、\", _jsx(_components.code, {\n        children: \"GenerateProjectFiles.sh\"\n      }), \"で一応できている。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし、私の環境では Launcher から直接起動することができない。\\nそのため、Launcher への登録は手動で調整する必要がある。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"以下、<name>と書いてある部分はローカルのユーザ名に置き換えてください\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まずは、アプリの設定ファイルがどのように生成されているのかを確認する。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"cd\"\n        }), \" ~/.local/share/applications\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"ls\"\n        }), \" -l\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"コマンドの結果の内、関係するのは以下。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"total xx\\n-rw------- 1 <name> <name> 428 Jan 16 01:08 com.epicgames.UnrealEngine.desktop\\n-rw------- 1 <name> <name> 382 Jan 16 01:08 com.epicgames.UnrealEngineEditor.desktop\\n-rw------- 1 <name> <name> 432 Jan 16 01:08 com.epicgames.UnrealVersionSelector.desktop\\n-rw------- 1 <name> <name> 85 Jan 16 20:40 defaults.list\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まず私は UnrealEditor のみ使いたいので、\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"rm\"\n        }), \" com.epicgames.UnrealEngine.desktop com.epicgames.UnrealVersionSelector.desktop\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"mv\"\n        }), \" com.epicgames.UnrealEngineEditor.desktop com.epicgames.UnrealEditor.desktop\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ファイル名を変えたので、\", _jsx(_components.code, {\n        children: \"defaults.list\"\n      }), \"を以下のように書き換える。\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"defaults.list\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"[Default Applications]\\napplication/uproject=com.epicgames.UnrealEditor.desktop\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最後に、\", _jsx(_components.code, {\n        children: \"com.epicgames.UnrealEditor.desktop\"\n      }), \"を以下のように書き換えアプリケーションを起動できるようにする。\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"com.epicgames.UnrealEditor.desktop\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"#!/usr/bin/env xdg-open\\n\\n[Desktop Entry]\\nVersion=1.0\\nType=Application\\nExec=/home/<name>/Forks/UnrealEngine/Engine/Binaries/Linux/UnrealEditor %f\\nPath=/home/<name>/Forks/UnrealEngine/Engine/Binaries/Linux\\nName=Unreal Editor\\nIcon=ubinary\\nTerminal=false\\nStartupWMClass=UnrealEditor\\nMimeType=application/uproject\\nComment=Created By Unreal Engine\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好みの問題だが、\", _jsx(_components.code, {\n        children: \"Unreal Editor\"\n      }), \"は\", _jsx(_components.code, {\n        children: \"Unreal Engine Editor\"\n      }), \"のままでもよい(ファイル名も同様)。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"デスクトップアプリケーションとして登録してあるので、Laucnher から起動できたり、Dock に追加することができる。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また、\", _jsx(_components.code, {\n        children: \".uproject\"\n      }), \"拡張子に紐付けてあるので、Files などで\", _jsx(_components.code, {\n        children: \".uproject\"\n      }), \"ファイルをダブルクリックすると、そのプロジェクトを UnrealEditor で起動してくれる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://www.unrealengine.com/en-US/ue-on-github\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://docs.unrealengine.com/5.1/en-US/downloading-unreal-engine-source-code/\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"UbuntuにUnrealEngineをインストールする方法","date":"2023-01-12T21:39:53","description":"Launcherやurpojectのクリックから起動できるようにします","tags":["ubuntu","ue","setup","install"]}},"__N_SSG":true}