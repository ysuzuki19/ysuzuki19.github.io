{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"構成","slug":"構成","lvl":2,"i":1},{"content":"ちょこっと設定","slug":"ちょこっと設定","lvl":2,"i":2},{"content":"おわりに","slug":"おわりに","lvl":2,"i":3},{"content":"参考","slug":"参考","lvl":2,"i":4}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以前，npm パッケージを公開してみた．カスタムフックおよびコンポーネントのどちらとも公開したので，「ある程度汎用性がある方法なのでは？」と思い，現状の構成を晒しておく．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"構成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#構成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"構成\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"パッケージを利用する際に開発元のサンプルが必要なことは往々にしてある．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのため，リポジトリにデモソースコードを配置したいが，全てルートにするとおかしなことになり，誰も嬉しくない．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのため，ルートを\", _jsx(_components.code, {\n        children: \"demo\"\n      }), \"/\", _jsx(_components.code, {\n        children: \"package\"\n      }), \"に分離し，リポジトリを覗きに来た人の目的によって，どちらに移動すればよいのかがひと目で分かるようにした．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \".\"\n        }), \"\\n├── demo \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# デモのソースコード\"\n        }), \"\\n├── package\\n│   ├── dist \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# rollupの出力先(publish対象)\"\n        }), \"\\n│   ├── docs \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# jsdoc/typedocで生成される(.gitignore)\"\n        }), \"\\n│   ├── jest.config.js \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# jestの設定\"\n        }), \"\\n│   ├── lib \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# ライブラリのソースコードを配置\"\n        }), \"\\n│   ├── LICENSE \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# npm run publishで親からコピーしてくる(.gitignore)\"\n        }), \"\\n│   ├── package.json\\n│   ├── package-lock.json\\n│   ├── README.md \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# npm run publishで親からコピーしてくる(.gitignore)\"\n        }), \"\\n│   ├── rollup.config.js \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# rollupの設定\"\n        }), \"\\n│   └── webpack.config.js\\n├── LICENSE\\n└── README.md \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# プロジェクトのREADME（github,npmともに表示）\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ちょこっと設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ちょこっと設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ちょこっと設定\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上記のディレクトリ構成だと，リポジトリの\", _jsx(_components.code, {\n        children: \"README.md\"\n      }), \"とパッケージの\", _jsx(_components.code, {\n        children: \"README.md\"\n      }), \"が共有されていない．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そこで私は，\", _jsx(_components.code, {\n        children: \"publish\"\n      }), \"の前にコピーすることで対応した．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"具体的には，\", _jsx(_components.code, {\n        children: \"package/package.json\"\n      }), \"に以下を設定し，\", _jsx(_components.code, {\n        children: \"publish\"\n      }), \"するときにはこちらを呼ぶようにした．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  ...\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"scripts\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"prepublish\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"npm test && cp ../README.md . && cp ../LICENSE .&& npm run build\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"publish\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"npm publish\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  ...\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"「あくまで一例」という事を考慮していただけると幸いです．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://github.com/ysuzuki19/react-structured-state\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://github.com/ysuzuki19/react-qrcode-reader\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"npmの小さいpackage開発のファイル構成","date":"2021-11-30T22:55:04","description":"自己流なので，一例として捉えてください","tags":["npm","package","oss"]}},"__N_SSG":true}