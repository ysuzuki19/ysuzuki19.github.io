{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"事象","slug":"事象","lvl":2,"i":1},{"content":"問題のある疑似コード","slug":"問題のある疑似コード","lvl":2,"i":2},{"content":"何がだめか？","slug":"何がだめか","lvl":2,"i":3},{"content":"何でダメだったんだろう？（想像）","slug":"何でダメだったんだろう想像","lvl":2,"i":4},{"content":"修正点","slug":"修正点","lvl":2,"i":5},{"content":"おわりに","slug":"おわりに","lvl":2,"i":6},{"content":"参考","slug":"参考","lvl":2,"i":7}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/post/nextjs-restarted\",\n        children: \"以前再入門した\"\n      }), \"こともあり，Next.js + typescript の組み合わせの開発が大分板についてきたが，まだまだ理解が浅い点が多く残る．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"今回，TypeScript\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"事象\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#事象\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"事象\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Props に記載した Interface の情報と実際に受け取る Props の情報が異なっている．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"問題のある疑似コード\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#問題のある疑似コード\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"問題のある疑似コード\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下のコードが，問題を発生させるコードとなる．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"このコードを利用すると，\", _jsx(_components.code, {\n        children: \"title\"\n      }), \"に\", _jsx(_components.code, {\n        children: \"['hoge']\"\n      }), \"という Props が与えられてしまう(!?)．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JS/TS に慣れている方ならすぐに問題点が分かると思うが，少しこのコードの問題点を探してみてほしい．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-tsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-tsx\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"interface\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"PostProps\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  title\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  content\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Post\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"NextPage\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"PostProps\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" title\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" content \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 何故か title に `['hoge']` が入っている\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 描画\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" getStaticProps\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function-variable function\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"GetStaticProps\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" params \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// ここでデータ取得の処理\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// filepathには`/posts/hoge`が入っているとする\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    props\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      title\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" filepath\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"split\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'/'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"slice\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n      content\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"何がだめか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何がだめか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何がだめか？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Array<string>.prototype.slice()\"\n      }), \"の戻り値の型は\", _jsx(_components.code, {\n        children: \"string[]\"\n      }), \"である．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"つまり，要素が 1 つであろうと，長さ\", _jsx(_components.code, {\n        children: \"1\"\n      }), \"の配列として\", _jsx(_components.code, {\n        children: \"props.title\"\n      }), \"に渡していた．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"解決するためには，\", _jsx(_components.code, {\n        children: \"filepath.split('/').slice(-1)[0]\"\n      }), \"のようにする必要がある．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"何でダメだったんだろう想像\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何でダメだったんだろう想像\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何でダメだったんだろう？（想像）\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ライブラリの実装を見る元気はなかったが，発生した事象を鑑みると，VSCode による型チェックがうまく機能していなかったと思う．\\nしかし，VSCode が悪いのではなく，型チェックする場所と Next.js 特有の形式がうまく噛み合わなかったのだと思う．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"具体的に，普段の開発時に型エラーを教えてくれる場所は，関数・コンポーネントの利用場所である．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next.js において\", _jsx(_components.code, {\n        children: \"NextPage\"\n      }), \"を実際に呼び出すのは開発者ではなく，ルーティングと共に Next.js 内部で行ってくれる．その時に同時に\", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \"の戻り値も渡してくれる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"これらにより，開発時には\", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \"/\", _jsx(_components.code, {\n        children: \"NextPage\"\n      }), \"は繋がっているように感じる一方，開発者は明示的に\", _jsx(_components.code, {\n        children: \"NextPage\"\n      }), \"を呼び出さないので VSCode としては「\", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \"の戻り値が\", _jsx(_components.code, {\n        children: \"NextPage\"\n      }), \"に渡されるなんて知らないよ」となるのだろう．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"修正点\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#修正点\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"修正点\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"処理面での解決策は上述の通り，0 番目の要素を渡すとよい．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"開発時に型チェックをしてもらうためには，\", _jsx(_components.code, {\n        children: \"GetStaticProps\"\n      }), \"に忘れずに\", _jsx(_components.code, {\n        children: \"PostProps\"\n      }), \"を入れることにより，\", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \"の戻り値の型を縛る．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-diff\",\n      children: _jsxs(_components.code, {\n        className: \"language-diff\",\n        children: [_jsxs(_components.span, {\n          className: \"token deleted-sign deleted\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix deleted\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \" export const getStaticProps: GetStaticProps = async ({ params }) => {\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token inserted-sign inserted\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix inserted\",\n            children: \"+\"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \" export const getStaticProps: GetStaticProps<PostProps> = async ({ params }) => {\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token unchanged\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix unchanged\",\n            children: \" \"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"   return {\\n\"\n          }), _jsx(_components.span, {\n            className: \"token prefix unchanged\",\n            children: \" \"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"     props: {\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token deleted-sign deleted\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix deleted\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"       title: filepath.split('/').slice(-1),\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token inserted-sign inserted\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix inserted\",\n            children: \"+\"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"       title: filepath.split('/').slice(-1)[0],\\n\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token unchanged\",\n          children: [_jsx(_components.span, {\n            className: \"token prefix unchanged\",\n            children: \" \"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"       content,\\n\"\n          }), _jsx(_components.span, {\n            className: \"token prefix unchanged\",\n            children: \" \"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"     },\\n\"\n          }), _jsx(_components.span, {\n            className: \"token prefix unchanged\",\n            children: \" \"\n          }), _jsx(_components.span, {\n            className: \"token line\",\n            children: \"   };\\n\"\n          })]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript が便利なぶん，型のエラーが出力されない内部的な不整合に対する耐性が弱まったように感じる．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この一言で表すと欠点のように感じなくもないが，これは，開発中の思考の矛先を絞れているという事にもとれるのではないか．ということになり，結果的に TypeScript による開発効率の向上がしっかりと出来ているという実感が残った．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"none\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"next.jsのNextPageが違う型のPropsを受ける時の修正点","date":"2021-11-21T23:09:39","description":"TypeScriptの型チェックを活用するための注意点ですよー","tags":["nextjs","typescript","cautionary"]}},"__N_SSG":true}