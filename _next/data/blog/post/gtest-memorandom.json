{"pageProps":{"toc":[{"content":"GoogleTest とは","slug":"googletest-とは","lvl":2,"i":0},{"content":"基本コンセプト","slug":"基本コンセプト","lvl":2,"i":1},{"content":"Basic Assertions（基本的なアサーション）","slug":"basic-assertions基本的なアサーション","lvl":2,"i":2},{"content":"Binary Comparison（二値比較）","slug":"binary-comparison二値比較","lvl":2,"i":3},{"content":"String Comparison（文字列比較）","slug":"string-comparison文字列比較","lvl":2,"i":4},{"content":"Simple Tests","slug":"simple-tests","lvl":2,"i":5},{"content":"ステップアップ","slug":"ステップアップ","lvl":2,"i":6},{"content":"参考","slug":"参考","lvl":2,"i":7}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    ol: \"ol\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"GoogleTest の備忘録を記す。\\nここを見たら GoogleTest を使える状態になれるような文書を目指す（が、参考ページの方が情報が確かそうなので目を通してほしいです！）。\\n適当にネット徘徊しながらまとめるので、マルチリンガルな文章になる予定。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"googletest-とは\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#googletest-とは\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"GoogleTest とは\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"xUnit アーキテクチャに基づいたテストフレームワーク、JUnit や PyUnit の経験があればすぐに使い始められるとのこと（私は未経験）。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"基本コンセプト\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#基本コンセプト\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"基本コンセプト\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GoogleTest はマクロによる Assertion（条件の真偽を確認する文）から始まる。\\nAssertion の結果には以下３つがある。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"成功\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"失敗\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"致命的な失敗\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下の場合、テスト自体が失敗となる。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"テストがクラッシュ\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Assertion が失敗\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"マクロによる Assertion とは、関数と似たようなものである。\\nクラス・関数のテストを行うには、それの動作を調べる Assertion を定義すると良い。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GoogleTest は、失敗を知らせるメッセージとともに、Assertion のソースファイルと該当行番号を出力する。\\nそこには、ユーザが定義した失敗メッセージを出力することも可能。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでは、Assertion によって致命的な失敗を定義することができる。致命的な失敗では、実行中の関数を中断する。そのため、メモリリークの原因となる可能性がある。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"失敗しても多くの情報を得るために、基本的には\", _jsx(_components.code, {\n        children: \"EXPECT_*\"\n      }), \"を使うことが望ましいが、失敗したら続ける意味が無い場合は\", _jsx(_components.code, {\n        children: \"ASSERT_*\"\n      }), \"を使う。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"basic-assertions基本的なアサーション\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#basic-assertions基本的なアサーション\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Basic Assertions（基本的なアサーション）\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| 致命的 assertion    | 非致命的 assertion  | 確認内容     |\\n| ------------------- | ------------------- | ------------ |\\n| ASSERT_TRUE(条件);  | EXPECT_TRUE(条件);  | 条件が true  |\\n| ASSERT_FALSE(条件); | EXPECT_FALSE(条件); | 条件が false |\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"binary-comparison二値比較\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#binary-comparison二値比較\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Binary Comparison（二値比較）\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| 致命的 assertion         | 非致命的 assertion       | 確認内容       |\\n| ------------------------ | ------------------------ | -------------- |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_EQ(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_EQ(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 == 値 2\"\n      }), \" |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_NE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_NE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 != 値 2\"\n      }), \" |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_LT(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_LT(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 < 値 2\"\n      }), \"  |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_LE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_LE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 <= 値 2\"\n      }), \" |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_GT(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_GT(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 > 値 2\"\n      }), \"  |\\n| \", _jsx(_components.code, {\n        children: \"ASSERT_GE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"EXPECT_GE(値 1, 値 2);\"\n      }), \" | \", _jsx(_components.code, {\n        children: \"値 1 >= 値 2\"\n      }), \" |\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TeX のショートカットと類似しているので、若干覚えやすいという印象。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ASSERT_EA()\"\n      }), \"では、「正解値」「算出値」の順で引数にする。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"二値は比較可能である必要がある（満たしていないと CE となる）。特に、ユーザ定義型であっても比較演算子が定義されていれば使うことが出来るが、\", _jsx(_components.code, {\n        children: \"Basic Assertion\"\n      }), \"を使うほうが望ましい。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"引数は一度だけ評価される。また、評価順序は未定義のため、どちらが先に呼ばれるかに依存するコードは禁止。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"引数がポインタの場合は、ポインタが等しいかを評価する。つまり、C 文字列(\", _jsx(_components.code, {\n        children: \"char*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"wchar_t*\"\n      }), \"等）を引数にするとアドレスが等しいかを比較してしまうため、以下で記述する\", _jsx(_components.code, {\n        children: \"String Comparison\"\n      }), \"を用いる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"string-comparison文字列比較\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#string-comparison文字列比較\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"String Comparison（文字列比較）\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"注意する必要があるのが、C 文字列（\", _jsx(_components.code, {\n        children: \"char\"\n      }), \"等）を比較するためのものである点。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| 致命的 assertion                     | 非致命的 assertion                   | 確認内容                                           |\\n| ------------------------------------ | ------------------------------------ | -------------------------------------------------- |\\n| ASSERT_STREQ(文字列 1,文字列 2);     | EXPECT_STREQ(文字列 1,文字列 2);     | C 文字列 1 == C 文字列 2                           |\\n| ASSERT_STRNE(文字列 1,文字列 2);     | EXPECT_STRNE(文字列 1,文字列 2);     | C 文字列 1 != C 文字列 2                           |\\n| ASSERT_STRCASEEQ(文字列 1,文字列 2); | EXPECT_STRCASEEQ(文字列 1,文字列 2); | 大文字小文字を無視した時、C 文字列 1 == C 文字列 2 |\\n| ASSERT_STRCASENE(文字列 1,文字列 2); | EXPECT_STRCASENE(文字列 1,文字列 2); | 大文字小文字を無視した時、C 文字列 1 != C 文字列 2 |\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"二値比較に\", _jsx(_components.code, {\n        children: \"STR\"\n      }), \",\", _jsx(_components.code, {\n        children: \"STRCASE\"\n      }), \"を加えると良いので覚えやすい。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"simple-tests\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#simple-tests\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Simple Tests\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"TEST()\"\n        }), \"マクロでテスト関数を定義して名前をつける。これは戻り値のない C++関数である。\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"関数内で通常の C++のように自由にコードを書ける。その上で、上述した Assertion で値を検証する。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"一つでも Assertion が失敗すればテスト全体が失敗した扱いとなる。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"階乗を返す以下の関数があるとする。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"int\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"int\"\n        }), \" n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Returns the factorial of n\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"以下のようにテストを定義することが出来る(\", _jsx(_components.a, {\n        href: \"https://github.com/google/googletest\",\n        children: \"公式 Github\"\n      }), \"から引用)。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-cpp\",\n      children: _jsxs(_components.code, {\n        className: \"language-cpp\",\n        children: [_jsx(_components.span, {\n          className: \"token function\",\n          children: \"TEST\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"FactorialTest\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" HandleZeroInput\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"EXPECT_EQ\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"TEST\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"FactorialTest\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" HandlesPositiveInput\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"EXPECT_EQ\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"EXPECT_EQ\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"2\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"2\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"EXPECT_EQ\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"EXPECT_EQ\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Factorial\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"40320\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここでは、\", _jsx(_components.code, {\n        children: \"HandleZeroInput\"\n      }), \"において境界条件の\", _jsx(_components.code, {\n        children: \"0\"\n      }), \"入力を確認し、\", _jsx(_components.code, {\n        children: \"HandlesPositiveInput\"\n      }), \"において正値入力に対する結果をテストしている。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私がここに新たにテストを追加するとしたら、\", _jsx(_components.code, {\n        children: \"HandlesNegativeInput\"\n      }), \"と称して負値入力でバグを起こさないかテストしたい（雰囲気わかってきたぞ！）。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ステップアップ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ステップアップ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ステップアップ\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここまでで概要が掴めたと思うので、後は用途に合わせて\", _jsx(_components.a, {\n        href: \"http://opencv.jp/googletestdocs/samples.html#samples\",\n        children: \"サンプル\"\n      }), \"や\", _jsx(_components.a, {\n        href: \"http://opencv.jp/googletestdocs/advancedguide.html#advancedguide\",\n        children: \"上級ガイド\"\n      }), \"を参照すると良い（気が向いたら本ページも更新します）。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://github.com/google/googletest：源泉\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"http://opencv.jp/googletestdocs/primer.html：神サイト（OpenCVのサイトの一部）\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"GoogleTestの備忘録","date":"2020-10-03T01:23:41+09:00","description":"OSSで学んだ，GoogleTestの使い方","tags":["googletest","c++","test"]}},"__N_SSG":true}