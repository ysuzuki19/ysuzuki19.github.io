{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"事象","slug":"事象","lvl":2,"i":1},{"content":"解決法","slug":"解決法","lvl":2,"i":2},{"content":"配列の場合","slug":"配列の場合","lvl":2,"i":3},{"content":"おわりに","slug":"おわりに","lvl":2,"i":4},{"content":"参考","slug":"参考","lvl":2,"i":5}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    div: \"div\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Golang を使いはじめて，\", _jsx(_components.code, {\n        children: \"for\"\n      }), \"＋\", _jsx(_components.code, {\n        children: \"range\"\n      }), \"記法の便利さをつくづく感じていた．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし，どうも脳内での実行結果と実際の実行結果が異なっていた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Golang 自体に慣れていないため，脳内実行が誤っていると思い，じっくりコードを見たが，どうも想定のコードがかけている．．．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"重い腰を上げデバッガを使ってみたところ，\", _jsx(_components.code, {\n        children: \"for _, _ := range\"\n      }), \"の理解を間違っていたということに気づいた．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"事象\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#事象\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"事象\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"問題点の疑似コードが以下．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"脳内では，\", _jsx(_components.code, {\n        children: \"range\"\n      }), \"で受け取るものが参照だと思っており，内部で\", _jsx(_components.code, {\n        children: \"id\"\n      }), \"を変更すると，\", _jsx(_components.code, {\n        children: \"humans\"\n      }), \"が更新されると思っていた．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [\"humans \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"map\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"suzuki\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"sato\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\nfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"humans\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"_\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" id \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"range\"\n        }), \" humans \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  id\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"++\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\nfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"humans\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"output\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"map\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"sato:1 suzuki:0\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\nmap\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"sato:1 suzuki:0\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"- 理想: sato:2 suzuki:1\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"解決法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#解決法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"解決法\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"map\"\n      }), \"のキーを受け取り，それを元に値を変更する．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [\"humans \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"map\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"suzuki\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"sato\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\nfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"humans\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" id \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"range\"\n        }), \" humans \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  humans\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" id \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"+\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\nfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"humans\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"output\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"map\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"sato:1 suzuki:0\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\nmap\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"sato:2 suzuki:1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"配列の場合\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#配列の場合\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"配列の場合\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"配列に対する\", _jsx(_components.code, {\n        children: \"range\"\n      }), \"は\", _jsx(_components.code, {\n        children: \"idx, value\"\n      }), \"を返すので，\", _jsx(_components.code, {\n        children: \"idx\"\n      }), \"を使い，配列から要素にアクセスするとのこと（疑似コードは割愛）．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また一つ賢くなりました．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://stackoverflow.com/a/29498133/16325804\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"golangのrangeの注意点","date":"2021-11-21T00:48:24","description":"ありゃりゃ，for-range内の値の変更ができないぞ・・・","tags":["golang","range","for","ref"]}},"__N_SSG":true}