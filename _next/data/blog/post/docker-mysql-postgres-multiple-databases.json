{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"達成したいもの","slug":"達成したいもの","lvl":2,"i":1},{"content":"MySQL の場合","slug":"mysql-の場合","lvl":2,"i":2},{"content":"ディレクトリ構成","slug":"ディレクトリ構成","lvl":3,"i":3},{"content":"コンテナ設定","slug":"コンテナ設定","lvl":3,"i":4},{"content":"DB 設定","slug":"db-設定","lvl":3,"i":5},{"content":"Postgres の場合","slug":"postgres-の場合","lvl":2,"i":6},{"content":"ディレクトリ構成","slug":"ディレクトリ構成-1","lvl":3,"i":7},{"content":"コンテナ設定","slug":"コンテナ設定-1","lvl":3,"i":8},{"content":"DB 設定","slug":"db-設定-1","lvl":3,"i":9},{"content":"おわりに","slug":"おわりに","lvl":2,"i":10},{"content":"参考","slug":"参考","lvl":2,"i":11}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    div: \"div\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私は開発において利用する DB にはローカルの Docker を使っている．その上で，\", _jsx(_components.code, {\n        children: \"postgresql\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"mysql\"\n      }), \"等の DB と\", _jsx(_components.code, {\n        children: \"adminer\"\n      }), \"を併用することでデータの可視化およびデータの管理を行うことが多い．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"DB コンテナに渡す環境変数によってコンテナ起動時に Database を自動生成することができるのだが，複数の Database を作るのに，\", _jsx(_components.code, {\n        children: \"adminer\"\n      }), \" を介して行っていたのだが，これだと開発者体験がよろしくない．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一人での開発であれば「面倒だなぁ」で済むのだが，複数人開発となると手間の掛かり具合が一気に跳ね上がる．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"その背景から，複数の Database をコンテナ起動時に自動生成する方法をまとめ，記しておく．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"達成したいもの\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#達成したいもの\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"達成したいもの\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"前項で記したとおり，コンテナ起動時に複数 Database を自動生成したい．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここでは，\", _jsx(_components.code, {\n        children: \"test1\"\n      }), \"と\", _jsx(_components.code, {\n        children: \"test2\"\n      }), \"を自動作成することにした．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MySQL および Postgres に分け，各設定を記載する．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"続く設定を施した後， \", _jsx(_components.code, {\n        children: \"docker-compose up\"\n      }), \"によって，コンテナを設定できる．(バックグラウンド実行するためには，\", _jsx(_components.code, {\n        children: \"docker-compose up -d\"\n      }), \"とするとよい)\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"mysql-の場合\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#mysql-の場合\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"MySQL の場合\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実は，MySQL に対する設定は\", _jsx(_components.a, {\n        href: \"https://onexlab-io.medium.com/docker-compose-mysql-multiple-database-fe640938e06b\",\n        children: \"キレイにまとまっているページ\"\n      }), \"があり，そこから学習した．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ディレクトリ構成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ディレクトリ構成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ディレクトリ構成\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \".\\n├── docker-compose.yml # コンテナの設定を記述\\n└── mysql-init         # DB初期化用のSQLを格納するディレクトリ\\n    └── 01.sql         # コンテナ起動時に実行されるSQL\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"コンテナ設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コンテナ設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コンテナ設定\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"./docker-compose.yml\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-docker\",\n      children: _jsx(_components.code, {\n        className: \"language-docker\",\n        children: \"version: '3'\\n\\nservices:\\n  db:\\n    image: mysql\\n    restart: always\\n    environment:\\n      MYSQL_ROOT_PASSWORD: root\\n    volumes:\\n      - ./mysql-init:/docker-entrypoint-initdb.d\\n    ports:\\n      - 3306:3306\\n  adminer:\\n    image: adminer\\n    restart: always\\n    ports:\\n      - 8080:8080\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"DB のみ起動されればよい場合は\", _jsx(_components.code, {\n        children: \"adminer\"\n      }), \"項は削除してしまっても構わない．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，この設定では，\", _jsx(_components.code, {\n        children: \"adminer\"\n      }), \"(\", _jsx(_components.a, {\n        href: \"http://localhost:8080\",\n        children: \"http://localhost:8080\"\n      }), \")を開いてログインする際は，\", _jsx(_components.code, {\n        children: \"MySQL/db/root/root\"\n      }), \"で入れる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"MySQL のコンテナにおいては，環境変数\", _jsx(_components.code, {\n        children: \"MYSQL_DATABASE\"\n      }), \"によって Database を生成できるのだが，SQL 実行によって Database を作成するため，こちらには書かず，DB 設定の方でどちらも作成することにした．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"db-設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#db-設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"DB 設定\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"./mysql-init/01.sql\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-sql\",\n      children: _jsxs(_components.code, {\n        className: \"language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"DATABASE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"IF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"NOT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"EXISTS\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"`\"\n        }), \"test1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"`\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"DATABASE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"IF\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"NOT\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"EXISTS\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"`\"\n        }), \"test2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"`\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"この SQL は，コンテナ起動時に実行される（\", _jsx(_components.code, {\n        children: \"docker-compose.yml\"\n      }), \"にそう設定されている）．そのため，シンプルにテーブルを作成する文である．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"postgres-の場合\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#postgres-の場合\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Postgres の場合\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MySQL に対する方法を拡張し，Postgres に対応してみた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"大枠は変えずに，Postgres への適用を行った．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ディレクトリ構成-1\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ディレクトリ構成-1\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ディレクトリ構成\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \".\\n├── docker-compose.yml # コンテナの設定を記述\\n└── postgres-init      # DB初期化用のSQLを格納するディレクトリ\\n    └── 01.sql         # コンテナ起動時に実行されるSQL\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"コンテナ設定-1\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コンテナ設定-1\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コンテナ設定\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"./docker-compose.yml\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-docker\",\n      children: _jsx(_components.code, {\n        className: \"language-docker\",\n        children: \"version: '3'\\n\\nservices:\\n  db:\\n    image: postgres\\n    restart: always\\n    environment:\\n      POSTGRES_USER: root\\n      POSTGRES_PASSWORD: root\\n    volumes:\\n      - ./postgres-init:/docker-entrypoint-initdb.d\\n    ports:\\n      - 5432:5432\\n  adminer:\\n    image: adminer\\n    restart: always\\n    ports:\\n      - 8080:8080\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"この設定では，\", _jsx(_components.code, {\n        children: \"adminer\"\n      }), \"(\", _jsx(_components.a, {\n        href: \"http://localhost:8080\",\n        children: \"http://localhost:8080\"\n      }), \")を開いてログインする際は，\", _jsx(_components.code, {\n        children: \"PostgreSQL/db/root/root\"\n      }), \"で入れる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Postgres のコンテナにおいては，環境変数\", _jsx(_components.code, {\n        children: \"POSTGRES_DB\"\n      }), \"によって Database を生成できるのだが，MySQL と同様の理由で値を入れない事にした．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"db-設定-1\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#db-設定-1\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"DB 設定\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MyQL で Database 作成したコマンドのままでは Postgres で同じことが出来ないので，Postgres において Database を作成するコマンドに書き換えた．\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"./postgres-init/01.sql\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-sql\",\n      children: _jsxs(_components.code, {\n        className: \"language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"DATABASE\"\n        }), \" test1\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"CREATE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"DATABASE\"\n        }), \" test2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"多くの情報を参考ページからもらいました．是非そちらを主軸として本記事の内容を活用してみてください！\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://onexlab-io.medium.com/docker-compose-mysql-multiple-database-fe640938e06b\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://hub.docker.com/_/mysql\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://hub.docker.com/_/postgres\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"https://www.postgresql.jp/document/9.4/html/sql-createdatabase.html\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"dockerで複数Databaseでmysqlやpostgresを起動する方法","date":"2022-04-10T23:42:19","description":"docker-composeを使い，自動で(複数の)Databaseを生成します．","tags":["docker","sql","mysql","postgres","database"]}},"__N_SSG":true}