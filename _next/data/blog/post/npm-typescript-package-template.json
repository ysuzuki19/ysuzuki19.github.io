{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"使い方","slug":"使い方","lvl":2,"i":1},{"content":"リポジトリ作成","slug":"リポジトリ作成","lvl":3,"i":2},{"content":"パッケージ情報設定","slug":"パッケージ情報設定","lvl":3,"i":3},{"content":"トークンを環境変数に設定","slug":"トークンを環境変数に設定","lvl":3,"i":4},{"content":"ライブラリ開発！","slug":"ライブラリ開発","lvl":3,"i":5},{"content":"publish","slug":"publish","lvl":3,"i":6},{"content":"おわりに","slug":"おわりに","lvl":2,"i":7},{"content":"参考","slug":"参考","lvl":2,"i":8}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最近，ふとした拍子に npm パッケージを公開している．実際の設定については\", _jsx(_components.a, {\n        href: \"/post/npm-how-to-publish-typescript-package\",\n        children: \"以前紹介\"\n      }), \"した．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"その際，パッケージの\", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \"設定やライセンスの配置(自分の npm パッケージは MIT が基本)，npm への publish のための GithubWorkflow 設定，\", _jsx(_components.code, {\n        children: \"rollup\"\n      }), \"によるソースコードのビルドなど，基本的には同一のファイルを頑張ってコピペする作業が発生していた．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは，非常に面倒で無駄な時間となることが多く，いざ開発しようと思ったときのやる気をそがれる一因となる．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのため，Github のテンプレートリポジトリに npm パッケージの基礎部分を配置することで，今後の大変な作業を削減した．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"使い方\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#使い方\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"使い方\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"リポジトリ作成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リポジトリ作成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リポジトリ作成\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/npm-package-template\",\n        children: \"こちら\"\n      }), \"にアクセスし，\", _jsx(_components.code, {\n        children: \"Use this template\"\n      }), \"をクリックし，そこからリポジトリを作成する．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここで，ふだん私は，開発段階では\", _jsx(_components.code, {\n        children: \"private\"\n      }), \"で，初回の publish 以降はリポジトリは\", _jsx(_components.code, {\n        children: \"public\"\n      }), \"に変更している．これはそれぞれ，未完成のリポジトリを公開しておく意義が薄い点，パッケージのリポジトリが公開されていると嬉しい点から，そのようにしている．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"パッケージ情報設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#パッケージ情報設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"パッケージ情報設定\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"rollup.config.js\"\n      }), \"の中にある\", _jsx(_components.code, {\n        children: \"LibraryName\"\n      }), \"という文字を自分のライブラリの名前に変更する．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"次に，\", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \"の編集を行う．開いてもらうとすぐに変更箇所が分かるかと思われるが念のため明示しておくと，\", _jsx(_components.code, {\n        children: \"name\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"description\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"repository.url\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"keywords\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"author\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"license\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"bugs.url\"\n      }), \"/ \", _jsx(_components.code, {\n        children: \"homepage\"\n      }), \"の項目を好みに修正する．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"トークンを環境変数に設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#トークンを環境変数に設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"トークンを環境変数に設定\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"直接Workflowに挿入しない要注意！！\\nトークンが流出した場合，アカウント内のパッケージが第三者によって勝手に変更される恐れがあります．\\n\\n万が一流出した場合は，トークンを再生成してください．\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"npm にサインインし，右上にある自身のアイコンをクリック，そこから\", _jsx(_components.code, {\n        children: \"Access Tokens\"\n      }), \"をクリックし，トークンを生成する．このとき，\", _jsx(_components.code, {\n        children: \"Automation\"\n      }), \"を選択する．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"npm ページをリロードする前に生成されたアクセストークンをコピーし，GitHub のリポジトリに移動する．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"リポジトリ名の下にある\", _jsx(_components.code, {\n        children: \"Settings\"\n      }), \"> \", _jsx(_components.code, {\n        children: \"Secrets\"\n      }), \"> \", _jsx(_components.code, {\n        children: \"Actions\"\n      }), \"へ進み，\", _jsx(_components.code, {\n        children: \"New repository secret\"\n      }), \"をクリック．\\nそこで，\", _jsx(_components.code, {\n        children: \"Name\"\n      }), \"には\", _jsx(_components.code, {\n        children: \"NPM_TOKEN\"\n      }), \"という値を入れ，\", _jsx(_components.code, {\n        children: \"Value\"\n      }), \"には上でコピーしたトークンを入れる．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ライブラリ開発\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ライブラリ開発\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ライブラリ開発！\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"index.ts\"\n      }), \"に自分のライブラリを実装する．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"publish\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#publish\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"publish\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"準備したテンプレートには，便利な Github Workflow が準備されている．これにより，GitHub の Web 画面上からパッケージの publish を行うことができる．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"まずは，\", _jsx(_components.code, {\n        children: \"Create a new release\"\n      }), \"をクリックし，\", _jsx(_components.code, {\n        children: \"Choose a tag\"\n      }), \"からタグを選択する．タグは，このタイミングで\", _jsx(_components.code, {\n        children: \"Create new tag\"\n      }), \"から作成できる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"次に，\", _jsx(_components.code, {\n        children: \"Release title\"\n      }), \"にリリースタイトルを入力し，必要に応じて\", _jsx(_components.code, {\n        children: \"Describe this release\"\n      }), \"にリリース情報を記載する．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最後に，\", _jsx(_components.code, {\n        children: \"Publish release\"\n      }), \"をクリックする．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"その後，\", _jsx(_components.code, {\n        children: \"Actions\"\n      }), \"を確認すると，ワークフローが動き出し，環境変数のトークンを認証情報としてパッケージを publish してくれる．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これはいいですね！\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"npmのTypeScript用パッケージのGitHubテンプレート作った！","date":"2022-05-27T23:42:51","description":"これで短時間でnpmパッケージを公開できますね","tags":["npm","package","typescript","template","github-workflow"]}},"__N_SSG":true}