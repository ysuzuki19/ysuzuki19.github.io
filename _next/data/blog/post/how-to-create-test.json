{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"実際の流れ","slug":"実際の流れ","lvl":2,"i":1},{"content":"意識すること","slug":"意識すること","lvl":2,"i":2},{"content":"おわりに","slug":"おわりに","lvl":2,"i":3},{"content":"参考","slug":"参考","lvl":2,"i":4}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"私は，一度 OSS に新機能のプルリクを出したことがある．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"その時，最初は新機能のみをプルリクに出していたのですが，OSS の保守性を高めるために，モジュールの単体テストをセットで追加する必要があるとのこと．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"テストがあれば，バグの再現が可能なテストを追加して，バグを洗い出したり，コードの変更があったときにもテストに通過を維持することで，新たなバグを埋め込みづらくする事ができるようである．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ちなみに，私が開発した機能は C++で記述し，テストには Google Test を用いた．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"実際の流れ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#実際の流れ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"実際の流れ\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"実際に行った開発の流れは以下のようになる．\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"追加する機能を決定\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"機能を追加\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"目視で必要な機能を満たしているか確認\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"機能が満たすべき要件を洗い出す(入出力)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"入出力を文字にする(簡単な入出力・境界条件など)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"使うユニットテストフレームワークを決定\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"テストを書く\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"テストを通過するか確認\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"意識すること\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#意識すること\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"意識すること\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"入出力を作る時，特殊な入力が考えられる場合は，できるだけ網羅するようにテストを書いたほうが良い．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，アルゴリズムに対するテストを考える際に，真逆の処理を行うコードを書いて，お互いの入出力が一致するかを確認するという手段もある．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これからは，自由に書く自分のコードでもできるだけテストを書くように心がけたい．(特に書き捨てではなく継続的に更新する予定のコードは)\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"https://github.com/google/googletest\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"scope":{"title":"OSSにプルリクを出す際の単体テストを作る流れ","date":"2021-06-14T21:54:27","description":"OSSにプルリクを出す歳は多くの場合必要な作業になります","tags":["test","c++","googletest"]}},"__N_SSG":true}