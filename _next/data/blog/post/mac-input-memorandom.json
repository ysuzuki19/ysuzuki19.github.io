{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"何が嬉しいのか？","slug":"何が嬉しいのか","lvl":2,"i":1},{"content":"どこで使えるのか？","slug":"どこで使えるのか","lvl":2,"i":2},{"content":"キーバインド一覧","slug":"キーバインド一覧","lvl":2,"i":3},{"content":"Ubuntu の人は","slug":"ubuntu-の人は","lvl":2,"i":4},{"content":"おわりに","slug":"おわりに","lvl":2,"i":5}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また、プログラミング用のエディタには Vim を用いており、Vim 以外の環境でのテキスト編集ではストレスが溜まる。\\nしかし幸いにも、普段使いのラップトップには Mac である。\\nMac の入力ショートカットには、Emacs 風のキーバインドが用意されている。今後自分で見返すためのキーバインドメモを残しておこうと思う。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ubuntu の人でこれと似たような入力ショートカットを使いたい人向けに、\", _jsx(_components.a, {\n        href: \"http://localhost:1313/post/mac-input-memorandom/#ubuntu%E3%81%AE%E4%BA%BA%E3%81%AF\",\n        children: \"本記事下部\"\n      }), \"に設定コマンドを記した。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"何が嬉しいのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何が嬉しいのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何が嬉しいのか？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vim や Emacs のメリットと被る点が多いだろうが、ホームポジションから指を離さずに移動・削除ができる。\\n特に、Del キーが存在しない（Fn+backspace が用意されている）Mac においては、カーソル後削除が非常に打ち辛く、以下で紹介する Control との組み合わせを覚えておくと入力中のストレスを低減する助けとなる。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"矢印キーを押さなくて済む\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"backspace, delete(on Mac, \", _jsx(_components.code, {\n          children: \"fn+backspace\"\n        }), \")を押さなくて済む\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"行の先頭・末尾へ一発移動できる\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"どこで使えるのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#どこで使えるのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"どこで使えるのか？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mac での入力では基本的にどこでも使える。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ブラウザ（GoogleDocs ではぜひ使いたい）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Bash（他、シェル）\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし、入力している環境で他のキーバインドが割り当てられている場合、競合して使えない可能性がある。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"キーバインド一覧\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#キーバインド一覧\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"キーバインド一覧\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"C-<key>\"\n      }), \"というのは、Control と\", _jsx(_components.code, {\n        children: \"<key>\"\n      }), \"の同時押しを意味する。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| キー                  | 機能                             |\\n| --------------------- | -------------------------------- |\\n| \", _jsx(_components.code, {\n        children: \"C-f\"\n      }), \"                 | 右移動(→)                        |\\n| \", _jsx(_components.code, {\n        children: \"C-b\"\n      }), \"                 | 左移動(←)                        |\\n| \", _jsx(_components.code, {\n        children: \"C-p\"\n      }), \"                 | 上移動（ターミナル：履歴戻）(↑)  |\\n| \", _jsx(_components.code, {\n        children: \"C-n\"\n      }), \"                 | 下移動（ターミナル：履歴進）(↓)  |\\n| \", _jsx(_components.code, {\n        children: \"C-a\"\n      }), \"                 | 行頭へ移動                       |\\n| \", _jsx(_components.code, {\n        children: \"C-e\"\n      }), \"                 | 行末へ移動                       |\\n| \", _jsx(_components.code, {\n        children: \"C-h\"\n      }), \"                 | カーソル前を削除(backspace)      |\\n| \", _jsx(_components.code, {\n        children: \"C-d\"\n      }), \"                 | カーソル後を削除(fn+backspace    |\\n| \", _jsx(_components.code, {\n        children: \"C-o\"\n      }), \"                 | カーソル位置に改行を挿入         |\\n| \", _jsx(_components.code, {\n        children: \"C-t\"\n      }), \"                 | カーソル前後を入れ替え           |\\n| \", _jsx(_components.code, {\n        children: \"C-k\"\n      }), \"                 | 行中のカーソル右を削除（ヤンク） |\\n| \", _jsx(_components.code, {\n        children: \"C-k\"\n      }), \"（範囲選択中に） | 選択範囲を削除（ヤンク）         |\\n| \", _jsx(_components.code, {\n        children: \"C-y\"\n      }), \"                 | C-k のヤンク内容をペースト       |\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"C-k\"\n      }), \"からの\", _jsx(_components.code, {\n        children: \"C-y\"\n      }), \"について、\", _jsx(_components.code, {\n        children: \"Command+c\"\n      }), \"からの\", _jsx(_components.code, {\n        children: \"Command+v\"\n      }), \"のコピペとは別枠である点に注意が必要である。また、\", _jsx(_components.code, {\n        children: \"C-f,b,p,n\"\n      }), \"は、\", _jsx(_components.code, {\n        children: \"Shift\"\n      }), \"キーでの範囲選択にも対応しているので、\", _jsx(_components.code, {\n        children: \"Shift+Control+n\"\n      }), \"で複数行選択して\", _jsx(_components.code, {\n        children: \"C-k\"\n      }), \",\", _jsx(_components.code, {\n        children: \"C-y\"\n      }), \"をする事で、複数のコピペも可能。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"ubuntu-の人は\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ubuntu-の人は\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Ubuntu の人は\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"gnome-tweak-tools\"\n      }), \"をインストールして GUI で設定しても良いが、コマンド一発でできる以下の方が楽であろう。以下コマンドは、\", _jsx(_components.a, {\n        href: \"https://askubuntu.com/questions/124815/how-do-i-enable-emacs-keybindings-in-apps-such-as-google-chrome/233539\",\n        children: \"ask ubuntu のこのページ\"\n      }), \"に載っていた。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Emacs風にするコマンド\"\n        }), \"\\n$ gsettings \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"set\"\n        }), \" org.gnome.desktop.interface gtk-key-theme \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"Emacs\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Defaultに戻すコマンド\"\n        }), \"\\n$ gsettings \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"set\"\n        }), \" org.gnome.desktop.interface gtk-key-theme \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"Default\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"私の知る限りの Control 系のショートカットは以上だが、他にも発見次第追加していこうと思う。\\nこれらを知らない状態よりは圧倒的に文書編集が捗るようになったが、モードの概念がある Vim よりは圧倒的に不便だが、日本語入力する場合は Mac 標準の方が優れていると感じた。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"個人的に、電車で作業する際に矢印キーを押さなくて済むのはありがたい。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Mac入力ショートカットメモ","date":"2020-04-27T17:41:42+09:00","description":"Emacsキーバインドですよ！","tags":["macos","macbook","emacs"]}},"__N_SSG":true}