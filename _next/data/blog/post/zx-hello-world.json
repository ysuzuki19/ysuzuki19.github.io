{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"セットアップ","slug":"セットアップ","lvl":2,"i":1},{"content":"Hello ZX","slug":"hello-zx","lvl":2,"i":2},{"content":"Hello ZX TypeScript","slug":"hello-zx-typescript","lvl":2,"i":3},{"content":"disable verbose","slug":"disable-verbose","lvl":2,"i":4},{"content":"receive command output","slug":"receive-command-output","lvl":2,"i":5},{"content":"cd()","slug":"cd","lvl":2,"i":6},{"content":"お試し","slug":"お試し","lvl":2,"i":7},{"content":"ls","slug":"ls","lvl":3,"i":8},{"content":"readdirSync","slug":"readdirsync","lvl":3,"i":9},{"content":"おわりに","slug":"おわりに","lvl":2,"i":10},{"content":"参考","slug":"参考","lvl":2,"i":11}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\",\n    div: \"div\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/google/zx\",\n        children: \"zx\"\n      }), \"というものがある．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは，Google が開発・公開している OSS であり，シェルスクリプトを JS で記述することができるというツールである．\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Bash is great, but when it comes to writing scripts, people usually choose a more convenient programming language. JavaScript is a perfect choice, but standard Node.js library requires additional hassle before using. The zx package provides useful wrappers around child_process, escapes arguments and gives sensible defaults.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"とあり，シェルスクリプトを JavaScript で書くために必要な準備をしてくれるらしい．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，私は TypeScript が好きなので，TypeScript で使う方法も模索してみた．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"セットアップ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#セットアップ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"セットアップ\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"インストールは，以下のコマンド．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" i -g zx\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hello-zx\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hello-zx\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Hello ZX\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まずは JavaScript で書いて実行してみる．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"top-level-await のために，\", _jsx(_components.code, {\n        children: \".mjs\"\n      }), \"拡張子がいいとのこと．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"zx において，シェルコマンドの実行は\", _jsx(_components.code, {\n        children: \"$\"\n      }), \"によってでき，JS 関数は普段どおりに呼び出すことが出来る．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"$\"\n      }), \"は非同期で呼び出されるようで，必要に応じて（ほとんどの場合必要だと思うが）\", _jsx(_components.code, {\n        children: \"await\"\n      }), \"をつける．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"hello_zx.mjs\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"token hashbang comment\",\n          children: \"#!/usr/bin/env zx\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"echo Hello zx\"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token console class-name\",\n          children: \"console\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"log\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'Hello zx'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"実行結果は以下となる．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" Hello zx\\nHello zx\\nHello zx\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"hello-zx-typescript\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hello-zx-typescript\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Hello ZX TypeScript\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"冒頭に述べたとおり，TypeScript が好きなので，TypeScript で実行できるようにする．\\n私の環境では，そのために\", _jsx(_components.code, {\n        children: \"@types/node\"\n      }), \"をインストールする必要があった．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"await\"\n      }), \"を使いたかったので，\", _jsx(_components.code, {\n        children: \"async\"\n      }), \"の IIFE で囲んだ(\", _jsx(_components.code, {\n        children: \"type: module\"\n      }), \"でいけるのかなぁ？)．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先程のサンプルを書き換えると以下のようになる．\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"hello_zx.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"token hashbang comment\",\n          children: \"#!/usr/bin/env zx\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'zx/globals'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"echo Hello ZX TS\"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token console class-name\",\n          children: \"console\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"log\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'Hello ZX TS'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"実行結果は先ほどと同様で，以下になる．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" Hello ZX TS\\nHello ZX TS\\nHello ZX TS\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"disable-verbose\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#disable-verbose\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"disable verbose\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"シェルコマンドを実行する時に，欲しくない出力が出ちゃうよね．以下のように無効化出来る．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"スクリプト内に以下を記載する．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [\"$\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"verbose\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"false\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"receive-command-output\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#receive-command-output\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"receive command output\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"シェルスクリプトを扱う上で，コマンドの結果を利用したいことがあると思う．そんな時，bash script なら\", _jsx(_components.code, {\n        children: \"$()\"\n      }), \"や backquote を使うと思う.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"pwd\"\n      }), \"の結果を変数に保存する場合，zx なら，以下のようにするとできる．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" result \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'pwd'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"/*\\n{\\n\\tstdout: xxx,\\n\\tstderr: yyy,\\n\\texitCode: z\\n}\\n */\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"コメントとして書いてあるのが，\", _jsx(_components.code, {\n        children: \"result\"\n      }), \"に格納される内容である．しかし実際，必要となるのは\", _jsx(_components.code, {\n        children: \"stdout\"\n      }), \"の値だけだったりする．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのためには，\", _jsx(_components.code, {\n        children: \"result.stdout\"\n      }), \"のように扱ってもよいし，以下のように直接受けることも出来る(ちなみに，エラー時には zx の標準設定だと終了してくれる)．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" current_path \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"pwd\"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"stdout\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token console class-name\",\n          children: \"console\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"log\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"current_path\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"/*\\nxxx\\n*/\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，\", _jsx(_components.code, {\n        children: \"verbose\"\n      }), \"を無効にした上でも，コマンドの結果を標準出力したい場合は，以下のようにする．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"pwd\"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"pipe\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"process\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"stdout\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"/*\\nxxx\\n*/\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"cd\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#cd\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"cd()\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"cd\"\n      }), \"については，\", _jsx(_components.code, {\n        children: \"$\"\n      }), \"で実行しても意味がない(サブプロセスで\", _jsx(_components.code, {\n        children: \"cd\"\n      }), \"されるだけ ww)ので，専用の関数として実装されている．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token function\",\n          children: \"cd\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'..'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"とすると，通常の\", _jsx(_components.code, {\n        children: \"cd\"\n      }), \"コマンドのようにディレクトリを移動することが出来る．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"お試し\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#お試し\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"お試し\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"カレントにあるファイルを\", _jsx(_components.code, {\n        children: \"files: string[]\"\n      }), \"に格納する方法を試してみる．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ls\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ls\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ls\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ls\"\n      }), \"コマンドで受け取ってみる．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"list_file.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token hashbang comment\",\n          children: \"#!/usr/bin/env zx\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'zx/globals'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n$\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"verbose\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"false\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" files \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" $\", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"ls\"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"stdout\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"split\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'\\\\n'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"slice\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token console class-name\",\n          children: \"console\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"log\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"files\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"このように，JS で普段使っているメソッドをシェルを織り交ぜながら使えるのはかなり便利なのかなと思った．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"readdirsync\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#readdirsync\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"readdirSync\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Nodejs の\", _jsx(_components.code, {\n        children: \"fs\"\n      }), \"を使う場合，以下のように書ける．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"list_file_node.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token hashbang comment\",\n          children: \"#!/usr/bin/env zx\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'zx/globals'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n$\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"verbose\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"false\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token arrow operator\",\n          children: \"=>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" files \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" fs\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"readdirSync\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'.'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token console class-name\",\n          children: \"console\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"log\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"files\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"こちらのほうが形式を整える必要がなく，必要な型で受け取れるため，便利に感じる．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript は好きだけど，トランスパイルが入るぶん zx とは相性悪い印象・・・\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，\", _jsx(_components.code, {\n        children: \"fs\"\n      }), \"などでできる処理については，シェルコマンドよりそちらを使ったほうが扱いやすい形式で結果を受け取ることが出来るぶん，便利だと思った．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"おそらく，それ自体も zx の存在価値なのだろうと思う．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/google/zx\",\n          children: \"https://github.com/google/zx\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"zx使ってみたけどムズイ","date":"2021-10-10T02:37:28","description":"google製のshellscriptツールをTypeScriptで使ってみた","tags":["shell","javascript","typescript","zx","tool"]}},"__N_SSG":true}