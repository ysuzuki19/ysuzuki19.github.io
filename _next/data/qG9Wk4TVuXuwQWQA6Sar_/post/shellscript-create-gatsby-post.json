{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"本文","slug":"本文","lvl":2,"i":1},{"content":"コード全文","slug":"コード全文","lvl":3,"i":2},{"content":"解説","slug":"解説","lvl":3,"i":3},{"content":"おわりに","slug":"おわりに","lvl":2,"i":4},{"content":"参考","slug":"参考","lvl":2,"i":5}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    h3: \"h3\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/post/my-first-post\",\n        children: \"Gatsby+Typescriptでブログを開設\"\n      }), \"したのだが，新しいポストを簡単に生成する方法がほしくなりました．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"チラッと探したところ，ブログを生成する方法ばかりがヒットし，単体のポストを生成する方法が見当たりませんでした．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"なので，いつか公式のPost生成コマンドを見つけるその日までの続きとして，簡単なシェルスクリプトを作りました．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"本文\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#本文\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"本文\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"コード全文\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コード全文\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コード全文\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"まずは，作成したコード（シェルスクリプト）全文を記載する．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"「スニペットだけくれよ！」という方はこちらを使ってほしい．\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"create_content.sh\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token shebang important\",\n          children: \"#!/usr/bin/env bash\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentname\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"$1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentdir\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"content/blog/\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentname}\"\n          }), \"\\\"\"]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \" -d \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentdir}\"\n          }), \"\\\"\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"then\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"[WARNING] dir already exists:  \\\\\", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            }), \"$\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"contentdir\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"\\\\\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            })]\n          }), \"\\\"\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"mkdir\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"$contentdir\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fi\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentpath\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentdir}\"\n          }), \"/index.md\\\"\"]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \" -f \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"${contentpath}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"then\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"[ERROR]  file already exists:  \\\\\", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            }), \"$\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"contentpath\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"\\\\\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            })]\n          }), \"\\\"\"]\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"exit\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Guard overwritting\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fi\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"---\\ntitle: \", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentname}\"\n          }), _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), \"\\ndate: \", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"$(\"\n            }), _jsx(_components.span, {\n              className: \"token function\",\n              children: \"date\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'+%Y-%m-%dT%H:%M:%S'\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \")\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), \"\\ndescription: \", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), \"\\ntags: []\\n---\\n\\\"\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"${contentpath}\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# if you use this script in vscode integrated terminal and open file.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# uncomment following line!\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# code -r ${contentpath}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"解説\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#解説\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"解説\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"まずは，コマンドライン引数から\", _jsx(_components.code, {\n        children: \"https://xxx/<post-name>\"\n      }), \"の\", _jsx(_components.code, {\n        children: \"<post-name>\"\n      }), \"部分を受け取り，\\nそれを\", _jsx(_components.code, {\n        children: \"contentname\"\n      }), \"という変数に格納する．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"同時に，コンテンツのMarkdownや画像などを配置するためのディレクトリ名になるものを変数化する．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentname\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"$1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentdir\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"content/blog/\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentname}\"\n          }), \"\\\"\"]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ディレクトリがすでに存在すると\", _jsx(_components.code, {\n        children: \"mkdir\"\n      }), \"がエラー終了するので，すでに存在するかどうかをチェックしてあげる．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"存在する場合は警告のようなものを表示し，存在しない場合は新しいポストを配置するディレクトリを生成する．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \" -d \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentdir}\"\n          }), \"\\\"\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"then\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"[WARNING] dir already exists:  \\\\\", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            }), \"$\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"contentdir\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"\\\\\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            })]\n          }), \"\\\"\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"mkdir\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"$contentdir\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fi\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここまではディレクトリが存在してもしなくてもスクリプトは処理される．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここからだが，テンプレートの生成にリダイレクトを使うので，ファイルが存在すると上書きしてしまう．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"なので，ファイル\", _jsx(_components.code, {\n        children: \".../index.md\"\n      }), \"が存在する場合はエラー修了にした．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"それらしい出力と共にエラー終了する．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"contentpath\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentdir}\"\n          }), \"/index.md\\\"\"]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \" -f \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"${contentpath}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"then\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"[ERROR]  file already exists:  \\\\\", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            }), \"$\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"contentpath\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"\\\\\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \"`\"\n            })]\n          }), \"\\\"\"]\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"exit\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Guard overwritting\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fi\"\n        }), \"\\n\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最後に，リダイレクトを使ってMarkdownのテンプレートを生成する．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"title\"\n      }), \"はコマンドライン引数を用い，\", _jsx(_components.code, {\n        children: \"date\"\n      }), \"は YYYY-MM-DDTHH:MM:SS の形式で記録する．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HTMLに残るのは YYYY-MM-DDまでなのだが，HH:MM:SSを書いておかないと，同じ日に複数のポストを生成した際に時間順ではなく名前順に並んでしまうため，それを避けるために時間まで入力しておく．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"description\"\n      }), \"はオプションだが，入力しておくと，Post一覧での表示文を制御できる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"tags\"\n      }), \"は，今後機能として追加していきたい．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"---\\ntitle: \", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${contentname}\"\n          }), _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), \"\\ndate: \", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token variable\",\n              children: \"$(\"\n            }), _jsx(_components.span, {\n              className: \"token function\",\n              children: \"date\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'+%Y-%m-%dT%H:%M:%S'\"\n            }), _jsx(_components.span, {\n              className: \"token variable\",\n              children: \")\"\n            })]\n          }), \"\\ndescription: \", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\\\\"\",\n            children: \"\\\\\\\"\"\n          }), \"\\ntags: []\\n---\\n\\\"\"]\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"${contentpath}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"もしVSCodeのIntegrated Terminalでコマンド実行してそのまま編集する場合は，\\n以下が便利である．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"code -r \", _jsx(_components.span, {\n          className: \"token variable\",\n          children: \"${contentpath}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"よかったら活用してください．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nodejsに書き換えたいなと思っています（が，詳しくないので時間がかかりそうです）．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/13633638/create-file-with-contents-from-shell-script\",\n          children: \"shellscriptでファイル生成\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/1401482/yyyy-mm-dd-format-date-in-shell-script\",\n          children: \"shellscriptで日時取得\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://linuxize.com/post/bash-check-if-file-exists/\",\n          children: \"shellscriptでファイルの有無確認\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/1378274/in-a-bash-script-how-can-i-exit-the-entire-script-if-a-certain-condition-occurs\",\n          children: \"shellscriptをエラー修了\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/41377489/how-to-open-a-file-from-the-integrated-terminal-in-visual-studio-code\",\n          children: \"integrated terminalからファイルを開く\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Gatsbyブログで新しいポストを生成するスクリプト作った","date":"2021-05-13T22:24:43","description":"公式で準備されてるコマンドがあるのかわからなかったので，シェルスクリプトで自作しました","tags":["bash","gatsby","blog"]}},"__N_SSG":true}