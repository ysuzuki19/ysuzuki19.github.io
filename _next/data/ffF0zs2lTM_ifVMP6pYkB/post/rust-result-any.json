{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"記法","slug":"記法","lvl":2,"i":1},{"content":"おわりに","slug":"おわりに","lvl":2,"i":2},{"content":"参考","slug":"参考","lvl":2,"i":3}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rustを使っていて、Errorの伝搬を簡素に行いたい場合があると思う。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのようなシチュエーションでは、\", _jsx(_components.a, {\n        href: \"https://crates.io/crates/anyhow\",\n        children: \"anyhowクレート\"\n      }), \"を使うことが多いが、シンプルな利用などで、依存を増やさずに単に \", _jsx(_components.code, {\n        children: \"?\"\n      }), \"だけを使いたい場合もある。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのような場合にどんなエラーでも受け取れるResultを指定する方法を紹介しておく。ただし、本格的に使う場合は \", _jsx(_components.code, {\n        children: \"anyhow\"\n      }), \"や \", _jsx(_components.code, {\n        children: \"thiserror\"\n      }), \"を使うことをお勧めする。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"記法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#記法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"記法\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"このように書くと、あらゆるエラーをOk(), Err()で返せるようになる。ただし、サイズが可変になってしまうので、\", _jsx(_components.code, {\n        children: \"Box<dyn std::error::Error>\"\n      }), \"を使うことになる。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function-definition function\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Result\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Box\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"dyn\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          }), \"error\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Error\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 何らかの処理\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"普段は使わないが、パッとスニペットを書くときや、小さいCLIツールとして書くときなどはこのようなエラーハンドリングにしてもいいかもしれない。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"RustのResultで、あらゆるエラーを伝搬させる","date":"2025-05-07T02:30:24+09:00","description":"依存を増やさない方法を紹介します","tags":["rust","tips"]}},"__N_SSG":true}