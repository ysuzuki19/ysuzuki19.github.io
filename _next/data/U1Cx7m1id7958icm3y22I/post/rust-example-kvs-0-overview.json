{"pageProps":{"toc":[{"content":"目次","slug":"目次","lvl":3,"i":0},{"content":"はじめに","slug":"はじめに","lvl":2,"i":1},{"content":"Sample for ...","slug":"sample-for-","lvl":2,"i":2},{"content":"設計","slug":"設計","lvl":2,"i":3},{"content":"リクエストメッセージの設計","slug":"リクエストメッセージの設計","lvl":2,"i":4},{"content":"レスポンスメッセージの設計","slug":"レスポンスメッセージの設計","lvl":2,"i":5},{"content":"内部で扱われるコマンドの設計","slug":"内部で扱われるコマンドの設計","lvl":2,"i":6},{"content":"Cargo.toml","slug":"cargotoml","lvl":2,"i":7},{"content":"おわりに","slug":"おわりに","lvl":2,"i":8},{"content":"参考","slug":"参考","lvl":2,"i":9}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    code: \"code\",\n    pre: \"pre\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h3, {\n      id: \"目次\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#目次\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"目次\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"0\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"概要\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-example-kvs-1-type-definitions\",\n          children: \"型定義など\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-example-kvs-2-handler-impl\",\n          children: \"handler定義\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-example-kvs-3-query-impl\",\n          children: \"Query定義\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-example-kvs-4-kvs-server-impl\",\n          children: \"KvsServer実装\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-example-kvs-5-kvs-main-usage\",\n          children: \"main&使ってみる\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"昔、Rustの勉強も兼ねて、Redis風のKVSをサーバで実装していました。その実装を紹介します。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"実装コードはGitHubで公開し、記事執筆以降もExample自体は書き換える可能性があります。\\nその際にコードの実態と記事上のコードがズレる可能性があります、ご了承ください。\\nそのような場合では、リポジトリのほうが整備されている状態と見てください。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"↓記事執筆時点でのパーマリンク\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/rust-examples/tree/f04005ea64867430a9f491fc8491c83546c17f1e/kvs\",\n        children: \"https://github.com/ysuzuki19/rust-examples/tree/f04005ea64867430a9f491fc8491c83546c17f1e/kvs\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"sample-for-\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#sample-for-\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Sample for ...\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本サンプルによって得られそうなことは、以下でしょうか。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"tokioによる非同期処理\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"tokioでTCPストリームを扱う\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"RwLockによる排他制御\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"値を持つenum\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"enumのFromStr/ToStr実装による変換\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"enumのTryFromを用いた、失敗する可能性のある返還\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"enumのパターンマッチ\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"VecをArrayに変換しつつ要素数によるバリデーション\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"strへ新規メソッドの実装\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"thiserrorによるカスタムエラー定義\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"unitテスト\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"設計\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#設計\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"設計\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"KVSとして基本的な機能を以下のように定義し、実装対象とした。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"TCPサーバとして動作\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"パフォーマンスやセキュリティを求めず、単にTCP接続でメッセージをそのまま送信する。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"メッセージのやり取りによってKVSを利用する\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"同時に複数のクライアントが接続可能\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"リクエストメッセージ\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"全てスペース区切りを基本とする\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"保存する値は文字列\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"メソッドはシンプルな２つで、\", _jsx(_components.code, {\n          children: \"GET\"\n        }), \", \", _jsx(_components.code, {\n          children: \"SET\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"GETは引数一つ\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"SETは引数二つ\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"リクエストメッセージの設計\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#リクエストメッセージの設計\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"リクエストメッセージの設計\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"基本的には、\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<method> <..args>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"という形式をとる。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"<..args>\"\n      }), \"の個数はメソッドごとに固定で、条件を満たさないとエラーとして処理をせずにレスポンスする。多くても少なくてもエラーとする。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"例）\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"ok\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"GET x\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"SET x 10\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"er\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"GET\"\n            }), \", \", _jsx(_components.code, {\n              children: \"GET x 10\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"SET\"\n            }), \", \", _jsx(_components.code, {\n              children: \"SET x\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"レスポンスメッセージの設計\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#レスポンスメッセージの設計\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"レスポンスメッセージの設計\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"RustのResult型にインスパイアされたルールでメッセージを返す。リクエストが成功した場合には \", _jsx(_components.code, {\n        children: \"Ok ...\"\n      }), \", 失敗した場合には \", _jsx(_components.code, {\n        children: \"Er ...\"\n      }), \"とする。\\nOkの場合はそのレスポンスのBody（取得対象の値や単なるメッセージ）を続け、Erの場合はその原因を人間が読みやすい形式で返す。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"GET <key>\"\n      }), \"で \", _jsx(_components.code, {\n        children: \"<key>\"\n      }), \"というキーがセットされていない場合はそのエラーを返す。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"クライアント向けSDKを開発する場合は、エラーコードだけで返すだけでいいと考えられるが、ここでの開発ではその辺りは目的としていないのでそこまではパフォーマンスを追い求めなかった。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"例）\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"ok\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"SET x 1\"\n            }), \"→\", _jsx(_components.code, {\n              children: \"Ok Succeed to insert\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"GET x\"\n            }), \"→\", _jsx(_components.code, {\n              children: \"Ok 10\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"er\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"SET x\"\n            }), \"→ \", _jsx(_components.code, {\n              children: \"Er method must to have 2 payloads\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"GET x 10\"\n            }), \"→\", _jsx(_components.code, {\n              children: \"Er method must to have 1 payloads\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"GET ashdf\"\n            }), \"→\", _jsx(_components.code, {\n              children: \"Er key not found: \\\"ashdf\\\"\"\n            }), \" （セットされていないキーはエラー）\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"内部で扱われるコマンドの設計\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#内部で扱われるコマンドの設計\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"内部で扱われるコマンドの設計\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここで実装対象とする \", _jsx(_components.code, {\n        children: \"GET\"\n      }), \", \", _jsx(_components.code, {\n        children: \"SET\"\n      }), \"はどちらも直感的で、そのイメージ通りに\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"GET\"\n        }), \": 引数一つで、引数をキーとする値を取得\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"SET\"\n        }), \": 引数二つで、引数１をキーとする値を引数２に上書き\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"と言った挙動を実現するものとする。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"cargotoml\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#cargotoml\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Cargo.toml\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"プロジェクト設定はこちら\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"Cargo.toml\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-toml\",\n      children: _jsxs(_components.code, {\n        className: \"language-toml\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token table class-name\",\n          children: \"package\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"name\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"kvs\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"version\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"0.1.0\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"edition\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"2021\\\"\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token table class-name\",\n          children: \"dependencies\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"tokio\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"version\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"1.21.0\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"features\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"full\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token key property\",\n          children: \"thiserror\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"1.0\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"当時の自分目線で、\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この開発によって、排他制御のバリエーションを学ぶことができた。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"かなり前に開発したものの紹介なので、読んだ記事が抜けていると思います。スミマセン。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"記事書く際に見たものをリストします。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://doc.rust-lang.org/beta/reference/items/associated-items.html\",\n          children: \"https://doc.rust-lang.org/beta/reference/items/associated-items.html\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://practice.rs/method.html\",\n          children: \"https://practice.rs/method.html\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://doc.rust-lang.org/std/sync/struct.RwLock.html\",\n          children: \"https://doc.rust-lang.org/std/sync/struct.RwLock.html\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Rustで簡単なKVSを実装してみた ~0. 概要~","date":"2023-11-04T15:00:00","description":"Redis風のものを作ってみました","tags":["rust","example","server","rust-example-kvs"]}},"__N_SSG":true}