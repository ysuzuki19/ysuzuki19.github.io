{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"TL;DR","slug":"tldr","lvl":2,"i":1},{"content":"本題","slug":"本題","lvl":2,"i":2},{"content":"何に困ったのか？","slug":"何に困ったのか","lvl":3,"i":3},{"content":"何が原因だったのか？","slug":"何が原因だったのか","lvl":3,"i":4},{"content":"じゃあどう解決するのか？","slug":"じゃあどう解決するのか","lvl":3,"i":5},{"content":"さらに便利に使いたい","slug":"さらに便利に使いたい","lvl":3,"i":6},{"content":"おわりに","slug":"おわりに","lvl":2,"i":7},{"content":"参考","slug":"参考","lvl":2,"i":8}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    div: \"div\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js でブログを SSG して，Github Pages にデプロイしようと思いました．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"初めての React 系フレームワークだった(Gatsby も併せて初めて触りました)ので，手間取った点もあります．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"多くの人が詰まりそうな点があったので公開します．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tldr\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#tldr\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"TL;DR\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"next export\"\n      }), \"する！\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"本題\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#本題\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"本題\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"何に困ったのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何に困ったのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何に困ったのか？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"漠然と，\", _jsx(_components.code, {\n        children: \"next build\"\n      }), \"をすれば SSG されて，\", _jsx(_components.code, {\n        children: \".next\"\n      }), \"内に静的サイトが生成されるのかなーと思い込んでいた点．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そして，特に考えもせずに，ステージングのようなイメージで Firebase Hosting でブログを確認しようと考え，デプロイ用ディレクトリの設定をした後，\", _jsx(_components.code, {\n        children: \"firebase deploy\"\n      }), \"をした．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"しかし，URL にアクセスすると，自分の作成したはずのページではなく，\", _jsx(_components.code, {\n        children: \"firebase init\"\n      }), \"が生成した\", _jsx(_components.code, {\n        children: \"index.html\"\n      }), \"が表示された．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"何が原因だったのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#何が原因だったのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"何が原因だったのか？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next.js\", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/deployment#nodejs-server\",\n        children: \"のデプロイメントのページ\"\n      }), \"を確認してみた．\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"next build\"\n        }), \" builds the production application in the \", _jsx(_components.code, {\n          children: \".next\"\n        }), \" folder. After building, \", _jsx(_components.code, {\n          children: \"next start\"\n        }), \" starts a Node.js server that supports hybrid pages, serving both statically generated and server-side rendered pages.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでいう production application というのは，Next.js で SSR するためということらしく，どうやら SSG するには他のアプローチが必要とのこと．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"つまり，Github Pages や Firebase Hosting のような静的サイトをホスティングするサービスを使う場合は，\", _jsx(_components.code, {\n        children: \"next build\"\n      }), \"だけでは不十分だということらしい．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"じゃあどう解決するのか\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#じゃあどう解決するのか\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"じゃあどう解決するのか？\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"結論から言うと，\", _jsx(_components.code, {\n        children: \"next export\"\n      }), \"をすると良い．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"next export\"\n      }), \"は，\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"まずは，静的 HTML エクスポートの生成については，先程の\", _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/deployment#static-html-export\",\n        children: \"デプロイメントのページの最下部\"\n      }), \"からジャンプすることができる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://nextjs.org/docs/deployment#static-html-export\",\n        children: \"該当ページ\"\n      }), \"によると，\", _jsx(_components.code, {\n        children: \"next export\"\n      }), \"コマンドを用いると，\", _jsx(_components.code, {\n        children: \"out\"\n      }), \"ディレクトリに静的 HTML が生成されるとのこと．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，SSG として Next.js を用いたい場合は，\", _jsx(_components.code, {\n        children: \"npm run build\"\n      }), \"を以下のように設定することが推奨されている．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"package.json\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json\",\n        children: [_jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"scripts\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"build\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"next build && next export\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここまでで，\", _jsx(_components.code, {\n        children: \"npm run build\"\n      }), \"によって\", _jsx(_components.code, {\n        children: \"out\"\n      }), \"ディレクトリにホスティングサービスにデプロイするためのファイル群が生成される．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのまま，\", _jsx(_components.code, {\n        children: \"out\"\n      }), \"をデプロイする設定をしてしまっても問題はない．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"さらに便利に使いたい\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#さらに便利に使いたい\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"さらに便利に使いたい\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"out\"\n      }), \"をデプロイしてもよいのだが，正直，デプロイするディレクトリの名前としては分かりづらい．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そこで，静的 HTML の生成ディレクトリ名を\", _jsx(_components.code, {\n        children: \"build\"\n      }), \"にしようと思う．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"next export\"\n      }), \"コマンドのヘルプを見ると・・・\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"help_of_next_export\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ next \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" --help\\n  Description\\n    Exports the application \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"for\"\n        }), \" production deployment\\n\\n  Usage\\n    $ next \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"options\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"dir\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"dir\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" represents the directory of the Next.js application.\\n  If no directory is provided, the current directory will be used.\\n\\n  Options\\n    -h - list this \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"help\"\n        }), \"\\n    -o - \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"set\"\n        }), \" the output \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"dir\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"defaults to \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'out'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n    -s - \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"do\"\n        }), \" not print any messages to console\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ふむふむ，\", _jsx(_components.code, {\n        children: \"-o\"\n      }), \"オプションで指定できるそうだ．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下のように設定すると良い．\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"package.json\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json\",\n        children: [_jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"scripts\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token property\",\n          children: \"\\\"build\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"next build && next export -o build\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以上です．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"今回は，\", _jsx(_components.code, {\n        children: \"build/\"\n      }), \"に静的 HTML を保存することにしましたが，\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"今後 Next.js の理解が深まり，\", _jsx(_components.code, {\n        children: \"build/\"\n      }), \"というディレクトリ名を他の用途で使う必要があれば，\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"out/\"\n      }), \"を静的 HTML を保存する先に戻そうかと考えています．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Next.js\", _jsx(_components.a, {\n            href: \"https://nextjs.org/docs/deployment#nodejs-server\",\n            children: \"のデプロイメントのページ\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: _jsx(_components.a, {\n            href: \"https://nextjs.org/docs/deployment#static-html-export\",\n            children: \"デプロイメントのページの最下部\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: _jsx(_components.a, {\n            href: \"https://nextjs.org/docs/deployment#static-html-export\",\n            children: \"該当ページ\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Next.jsでSSGしたブログをホスティングサービスにデプロイする設定","date":"2021-05-19T20:45:21","description":"index.htmlが単純には生成されなかったので残しておきます","tags":["nextjs","blog","ssg"]}},"__N_SSG":true}