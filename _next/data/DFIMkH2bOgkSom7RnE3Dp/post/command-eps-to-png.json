{"pageProps":{"toc":[{"content":"環境","slug":"環境","lvl":2,"i":0},{"content":"方法","slug":"方法","lvl":2,"i":1},{"content":"参考","slug":"参考","lvl":2,"i":2}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"ありがたいことに、ベクター形式のフリー画像がインターネット上にたくさん公開されている。\\nしかしながら、eps 形式をそのまま利用できない環境もあるだろう。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"オンライン変換できるサイトもあるのだが、せっかくなのでオフラインで変換する方法を調べた。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"環境\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#環境\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"環境\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Ubuntu 20.04 LTS\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"方法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#方法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"方法\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"eps を描画してくれる ghostscript(コマンド名は gs)を利用すると簡単に変換できる。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \"png16m -dGraphicsAlphaBits\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"4\"\n        }), \" -sOutputFile\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \"filename.png filename.eps\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.ghostscript.com/doc/current/Use.htm#Invoking\",\n        children: \"https://www.ghostscript.com/doc/current/Use.htm#Invoking\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"コマンドでepsをpngに変換する","date":"2020-12-02T22:11:56+09:00","description":"gsコマンドです","tags":["gs","convert","eps","png"]}},"__N_SSG":true}