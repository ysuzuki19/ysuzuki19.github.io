{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"コンセプト","slug":"コンセプト","lvl":2,"i":1},{"content":"使用例","slug":"使用例","lvl":2,"i":2},{"content":"Option型の実装","slug":"option型の実装","lvl":2,"i":3},{"content":"実装のポイント","slug":"実装のポイント","lvl":2,"i":4},{"content":"構造体の定義について","slug":"構造体の定義について","lvl":3,"i":5},{"content":"unsafeな取得メソッド","slug":"unsafeな取得メソッド","lvl":3,"i":6},{"content":"おわりに","slug":"おわりに","lvl":2,"i":7},{"content":"参考","slug":"参考","lvl":2,"i":8}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Goでは、「存在するかわからない」値を表現するにあたって、\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ゼロ値で表現\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"例えば \", _jsx(_components.code, {\n          children: \"-1\"\n        }), \"などの使わない範囲を決め、それで表現\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"型をポインタ画にしてnilで表現\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"などの手法が使われることが多いと思われる。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし、これらの手法はそれぞれに問題があり、かつ、コード全体でその意図を意識しながら読み書きする必要が出てしまい、ハイコンテキストなコードとなってしまうおそれもある。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そこで、このようなシチュエーションでつかえるようなOption型を実装してみた。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"コンセプト\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コンセプト\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コンセプト\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"目指すのはこのあたり。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"型で意味を表現できるようにする\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"メモリ効率を維持する\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"メモリ安全性を向上する\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"使用例\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#使用例\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"使用例\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"パッケージはGitHubに公開している。 (2025/05/26現在)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"package\"\n        }), \" main\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"fmt\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"github.com/ysuzuki19/robustruct/pkg/option\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" User \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  Name \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), \"             \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 必須フィールド\"\n        }), \"\\n  Age  option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 存在するかわからないフィールド\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  user \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" User\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"Alice\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \"  option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"NewSome\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"30\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 存在する場合\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" user\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"IsSome\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    fmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Printf\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"User %s is %d years old.\\\\n\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Unwrap\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    fmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Printf\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"User %s age is unknown.\\\\n\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 存在しない場合\"\n        }), \"\\n  user2 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" User\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"Bob\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \":\"\n        }), \"  option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"None\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"//　存在しない場合、型指定とともに Noneを使う\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" user2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"IsSome\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    fmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Printf\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"User %s is %d years old.\\\\n\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Unwrap\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    fmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Printf\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"User %s age is unknown.\\\\n\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" user2\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"option型の実装\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#option型の実装\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Option型の実装\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"参考にするのはRustのOption型とし、用途やメソッドの種類などは参考にしつつ、型情報や内部の挙動はGoの慣例に合わせて実装する。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"構造体そのものはシンプルで、単に \", _jsx(_components.code, {\n        children: \"T\"\n      }), \" 型のポインタを保持する。このシンプルな仕組みにより、Optionによる抽象化によるメモリ使用量の増加を抑える。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" Option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"T any\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\\tptr \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"T\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"実装のポイント\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#実装のポイント\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"実装のポイント\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"構造体の定義について\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#構造体の定義について\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"構造体の定義について\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"考慮している点として、「Goではゼロ値で自動で初期化される」のを前提とする必要があり、この場合でも安全に動く必要がある。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"つまり、例えば\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" Option\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), \"T any\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  ptr \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"T\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  is_some \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"bool\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"のような構造体にして、データ管理と状態管理を別にしてしまうと、間違えて \", _jsx(_components.code, {\n        children: \"option.Option {is_some: true}\"\n      }), \"のように初期化してしまった場合に、意図せずnilポインタを参照してしまう危険性がある。\\nそれを避けたい場合、\", _jsx(_components.code, {\n        children: \"o.is_some && o.ptr != nil\"\n      }), \"といった条件を書くことも可能だが、この比較を行う場合、実際には後半ブロックのみで十分であるため、この作りに落ち着いた。\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"unsafeな取得メソッド\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#unsafeな取得メソッド\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"unsafeな取得メソッド\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"safetyのみを考慮するならば、Option型のポインタを直接取得するメソッドは不要であるが、Goの慣例に合わせて、以下のようなメソッドを追加している。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Ptr() *T\"\n        }), \" - ポインタをそのまま取得する\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは、直接ポインタを取得するもので、それが存在するものなのかどうかは度外視し、単にポインタを取得する。　\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Get() (*T, bool)\"\n        }), \" - ポインタとその存在有無を取得する\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"map\"\n      }), \"アクセスなどでも見られるような、データとその存在有無を同時に取得するメソッド。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/ysuzuki19/robustruct/tree/main/pkg/option\",\n        children: \"こちら\"\n      }), \"に公開しているので、よかったら使ってみてください！\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Goで安全に使えるOption型を書いてみた","date":"2025-05-26T04:55:54+09:00","description":"より安全に「存在するかわからない」を表現できることを目指します。","tags":["go","golang","safety"]}},"__N_SSG":true}