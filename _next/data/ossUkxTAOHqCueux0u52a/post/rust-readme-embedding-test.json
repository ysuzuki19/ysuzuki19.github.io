{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"設定方法","slug":"設定方法","lvl":2,"i":1},{"content":"docをローカルで表示","slug":"docをローカルで表示","lvl":2,"i":2},{"content":"注意点","slug":"注意点","lvl":2,"i":3},{"content":"おわりに","slug":"おわりに","lvl":2,"i":4},{"content":"参考","slug":"参考","lvl":2,"i":5}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"RustのライブラリをOSSに公開するときのドキュメント周りの整備の話を記す。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここでは、\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"READMEをdocs.rsのクレートページに載せる\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"README.mdに載せるコードスニペットがコンパイルするかチェックする\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"の2点の手法を紹介する。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"設定方法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#設定方法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"設定方法\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"src/lib.rs\"\n      }), \"(ライブラリのエントリポイント)に \", _jsx(_components.code, {\n        children: \"include_str!\"\n      }), \"を使って、README.mdの内容をコメントとして展開する。\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"src/lib.rs\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token comment\",\n          children: \"//!\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#![doc = include_str!(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"../README.md\\\"\"\n          }), \")]\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"//!\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"mod\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token module-declaration namespace\",\n          children: \"hoge\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"mod\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token module-declaration namespace\",\n          children: \"fuga\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"基本的にはこれで設定が完了する。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これを記述しておけば、\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ cargo \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"test\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"を実行するときに、README.mdの展開と、rustスニペットのコンパイルチェックおよびassertのチェックを行うことができる。\\nつまり、スニペットに assertを書いておけば、ライブラリ利用者にコードの状態を伝えられるだけでなく、整合性の担保も同時に行うことができる。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"docをローカルで表示\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#docをローカルで表示\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"docをローカルで表示\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下のコマンドにより、ローカルでドキュメントをブラウザ表示可能\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ cargo doc --open\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"注意点\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#注意点\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"注意点\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"#![doc = include_str!(path)]\"\n      }), \"は、コンパイル時にドキュメントをコード内に展開するので、\", _jsx(_components.code, {\n        children: \"lib.rs\"\n      }), \"内の続くコードは、\", _jsx(_components.code, {\n        children: \"README.md\"\n      }), \"の行数のぶん下にずれる。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"それにより、\", _jsx(_components.code, {\n        children: \"lib.rs\"\n      }), \"内でのエラー表記の行数が見づらくなってしまう。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そのため、\", _jsx(_components.code, {\n        children: \"lib.rs\"\n      }), \"に直接何かを定義するのは、doc埋め込みをしない場合より強く、避けたほうが良くなる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"#![doc = include_str!(path)]\"\n      }), \"を並べれば、他の場所のドキュメントのチェックも行うことができるだろう。\\nこれにより、Docの変更漏れを自動で検出でき、よりコード変更に集中できるようになると考えられる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Rustのcrateを公開する際、READMEをdocs.rsに埋め込み、スニペットをTestする","date":"2025-07-15T23:35:18","description":"crate公開用の設定","tags":["rust","doc","test","readme"]}},"__N_SSG":true}