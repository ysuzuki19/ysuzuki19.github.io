{"pageProps":{"toc":[{"content":"目次","slug":"目次","lvl":2,"i":0},{"content":"はじめに","slug":"はじめに","lvl":2,"i":1},{"content":"前提","slug":"前提","lvl":2,"i":2},{"content":"プロジェクトの作成","slug":"プロジェクトの作成","lvl":2,"i":3},{"content":"目次","slug":"目次-1","lvl":2,"i":4},{"content":"おわりに","slug":"おわりに","lvl":2,"i":5},{"content":"参考","slug":"参考","lvl":2,"i":6}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"目次\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#目次\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"目次\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"0 概要\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-1-basic\",\n          children: \"1 基礎\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-2-visualization\",\n          children: \"2 可視化\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-3-coverage-off\",\n          children: \"3 カバレッジ計測の範囲無効\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ソフトウェアの単体テストを書くとき、テストがどの程度コードをカバーしているかの測定は、ひとつの指標として重要である。カバレッジを測定することで、テストの網羅性を確認し、未テストのコードを特定することができる。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rustでは、\", _jsx(_components.code, {\n        children: \"llvm-cov\"\n      }), \"を使用してカバレッジを計測することができる。このドキュメントでは、Rustプロジェクトでのカバレッジ計測の環境構築から測定方法を解説する。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"前提\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#前提\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"前提\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"さまざまカバレッジツールがあると思うが、ここでは \", _jsx(_components.code, {\n        children: \"llvm-cov\"\n      }), \"を使用してカバレッジを計測するものとする。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"プロジェクトの作成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#プロジェクトの作成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"プロジェクトの作成\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"適当な名前でRustプロジェクトを作成する。ここでは、\", _jsx(_components.code, {\n        children: \"coverage\"\n      }), \"とした。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ cargo new --vcs none coverage\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"目次-1\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#目次-1\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"目次\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"0 概要\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-1-basic\",\n          children: \"1 基礎\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-2-visualization\",\n          children: \"2 可視化\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/post/rust-llvm-coverage-3-coverage-off\",\n          children: \"3 カバレッジ計測の範囲無効\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"コードのカバレッジは、基本的には高いほうが良いと考えられるが、それのみを追い求めるのが正しいわけではない。カバレッジが高いからといって、必ずしもコードの品質が高いとは限らない。逆に、カバレッジが低くても、重要な部分がしっかりとテストされている場合もある。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのため、カバレッジはあくまで指標の一つとして捉え、他の品質指標と組み合わせて総合的に判断することが重要である。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"例えば、カバーされていない分岐は、Test漏れの可能性があるし、通らなくて良いならそれは実装を変えるという判断をしてもいいかもしれない。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"Rustでcoverage計測する ~0. 概要~","date":"2025-06-07T16:39:44","description":"llvm-covを使って、Testのコードカバー率を計測する方法を紹介","tags":["rust","coverage","llvm"]}},"__N_SSG":true}