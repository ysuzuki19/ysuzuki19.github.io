{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"基本","slug":"基本","lvl":2,"i":1},{"content":"CustomError, CustomResultの定義例","slug":"customerror-customresultの定義例","lvl":2,"i":2},{"content":"説明","slug":"説明","lvl":2,"i":3},{"content":"おわりに","slug":"おわりに","lvl":2,"i":4},{"content":"参考","slug":"参考","lvl":2,"i":5}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rustにおいて、 \", _jsx(_components.code, {\n        children: \"?\"\n      }), \"によるエラー処理は非常に便利である。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"明示的で簡潔な記法で他の言語と同様なエラー処理を行いつつ、安全にエラーハンドリングを行うことが可能という点が特に気に入っている。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"しかし、そのまま使うだけでは、同じ型のエラーしか \", _jsx(_components.code, {\n        children: \"?\"\n      }), \"によって処理することはできない。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そこで、自分の受け取りたいあらゆるエラー型を受け取れるCustomError、およびそれを楽に利用できるCustomResultを定義する方法を紹介する。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"基本\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#基本\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"基本\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://docs.rs/thiserror/latest/thiserror/\",\n        children: \"thiserror\"\n      }), \"というクレートを使えば万事解決。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(公式ドキュメントを読めば本記事以上に使えます!)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"このクレートは非常に便利である。カスタムエラーを簡単に定義できるし、他のエラー型からの変換も簡潔に設定できる。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"customerror-customresultの定義例\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#customerror-customresultの定義例\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CustomError, CustomResultの定義例\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"サンプルとして、よく使われるであろう\", _jsx(_components.code, {\n        children: \"io:Error\"\n      }), \"を受け取れるようにした。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"use\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), \"io\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"use\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"thiserror\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Error\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token type-definition class-name\",\n          children: \"CustomResult\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"T\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Result\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"T\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"CustomError\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token attribute attr-name\",\n          children: \"#[derive(Debug, Error)]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"enum\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token type-definition class-name\",\n          children: \"CustomError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"I/O error occurred: {0}\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"IoError\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token attribute attr-name\",\n          children: \"#[from]\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"io\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Error\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\\n    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Error occurred on hoge()\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"HogeError\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\\n    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"undefined error\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"UnknownError\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Undefined error occurred: {0}\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Undefined\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"String\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"説明\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#説明\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"説明\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"まずは必要なクレートの\", _jsx(_components.code, {\n        children: \"use\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"use\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), \"io\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"use\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"thiserror\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Error\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"これはカスタムなResultで、\", _jsx(_components.code, {\n        children: \"Result\"\n      }), \"の型エイリアスである。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Errorとして、\", _jsx(_components.code, {\n        children: \"CustomError\"\n      }), \"を使うので、この\", _jsx(_components.code, {\n        children: \"CustomResult\"\n      }), \"型も万能になっていく。\\nこれにより、どのエラーも\", _jsx(_components.code, {\n        children: \"?\"\n      }), \"で処理できるようになる。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"関数定義時は、\", _jsx(_components.code, {\n        children: \"fn fuga() -> CustomResult<i8>\"\n      }), \"みたいにする。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token type-definition class-name\",\n          children: \"CustomResult\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"T\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Result\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"T\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"CustomError\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"本題の\", _jsx(_components.code, {\n        children: \"CustomError\"\n      }), \"の定義。\", _jsx(_components.code, {\n        children: \"Debug\"\n      }), \"は無くてもいいが、\", _jsx(_components.code, {\n        children: \"Error\"\n      }), \"は必須。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"token attribute attr-name\",\n          children: \"#[derive(Debug, Error)]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"enum\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token type-definition class-name\",\n          children: \"CustomError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"まずは\", _jsx(_components.code, {\n        children: \"io::Error\"\n      }), \"への対応。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"#[from]\"\n      }), \"で元となるエラーを書くことができ、そのフィールドを\", _jsx(_components.code, {\n        children: \"#[error()]\"\n      }), \"内で利用できる。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"この\", _jsx(_components.code, {\n        children: \"0\"\n      }), \"というのは、タプル型の１つ目の要素という意で、\", _jsx(_components.code, {\n        children: \"CustomError::IoError.0\"\n      }), \"(疑似コード)を指す。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [\"    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"I/O error occurred: {0}\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"IoError\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token attribute attr-name\",\n          children: \"#[from]\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token namespace\",\n          children: [\"io\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"::\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Error\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"カスタマイズしたエラー。これは「\", _jsx(_components.code, {\n        children: \"hoge\"\n      }), \"が失敗した」という意図のエラーを書いてみた。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [\"    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Error occurred on hoge()\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"HogeError\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これはちょっとしたコツなのだが、開発段階で必要になる全てのエラーを追加していくのは骨が折れるし、不要になれば削除されることもあると予想される。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そのため、一時的に利用できるエラーを書いておくと、実際の開発が円滑になると考えている。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"開発時の利便性のためにメッセージをつけられるようにすると、どんなエラーが発生したのかの追跡性が向上する。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-rust\",\n      children: _jsxs(_components.code, {\n        className: \"language-rust\",\n        children: [\"    \", _jsxs(_components.span, {\n          className: \"token attribute attr-name\",\n          children: [\"#[error(\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Undefined error occurred: {0}\\\"\"\n          }), \")]\"]\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Undefined\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"String\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"自分は、このようなカスタマイズによって、元々便利なエラーハンドリングをもっと便利に使えるようになりました！\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"エラーを返す際に便利な様、タプル型を使うのが基本だと思います。ですが、必要があれば構造体で定義してもいいと思います。その例は\", _jsx(_components.a, {\n        href: \"https://docs.rs/thiserror/latest/thiserror/#example\",\n        children: \"公式ドキュメントのExample\"\n      }), \"にあるので、必要な場合は見てみてください。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.rs/thiserror/latest/thiserror/\",\n          children: \"https://docs.rs/thiserror/latest/thiserror/\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"rustで最強のCustomResult,CustomErrorを定義する方法","date":"2023-08-31T22:07:39","description":"thiserrorを使って何でも受け取れるエラー型を定義します。","tags":["rust","custom","error","thiserror"]}},"__N_SSG":true}