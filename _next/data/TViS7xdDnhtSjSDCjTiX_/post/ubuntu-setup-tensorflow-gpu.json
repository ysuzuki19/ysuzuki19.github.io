{"pageProps":{"toc":[{"content":"環境","slug":"環境","lvl":2,"i":0},{"content":"依存関係の確認","slug":"依存関係の確認","lvl":2,"i":1},{"content":"tensorflowのインストール","slug":"tensorflowのインストール","lvl":2,"i":2},{"content":"NVIDIAドライバのインストール","slug":"nvidiaドライバのインストール","lvl":2,"i":3},{"content":"CUDAのインストール","slug":"cudaのインストール","lvl":2,"i":4},{"content":"cuDNNのインストール","slug":"cudnnのインストール","lvl":2,"i":5},{"content":"その他パッケージのインストール","slug":"その他パッケージのインストール","lvl":2,"i":6},{"content":"おわりに","slug":"おわりに","lvl":2,"i":7}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"UBUNTU20.04LTSにTensorflowのGPU環境をセットアップしました。\\n備忘録として記します。\\nまた、Ubuntu20.04ではPython2系は無く、ただ\", _jsx(_components.code, {\n        children: \"python\"\n      }), \"とした時はPython3系を指すという点に注意してください。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"環境\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#環境\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"環境\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ubuntuの日本語版RemixをインストールしてPythonやpipはaptからインストールした。\\nまた、\", _jsx(_components.code, {\n        children: \"tensorflow-gpu\"\n      }), \"のバージョンについて、pipから特に明記せずにインストールされるものを導入することにした(2020-10-29時点)。\\npipが更新されている場合は、\", _jsx(_components.code, {\n        children: \"pip install tensorflow-gpu==2.3.1\"\n      }), \"のようにバージョンを明記することでインストールできる。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Machine>\\n\\tAMD Ryzen 3600X\\n\\tNVIDIA GeForce 2070 SUPER\\n\\n<OS>\\n\\tUbuntu 20.04 LTS\\n\\n<Software>\\n\\tPython 3.8.5\\n\\tpip 20.0.2 (python 3.8)\\n\\n<Package>\\n\\ttensorflow-gpu 2.3.1\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"依存関係の確認\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#依存関係の確認\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"依存関係の確認\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"tensorflow-gpuには、CUDAおよびcuDNNのバージョンを考慮する必要があるため、最初は導入が難しく感じる。\\nしかし、ここではtensorflowに記載されている依存バージョンに合わせてインストールすると良い。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://www.tensorflow.org/install/source#gpu\",\n        children: \"tensorflowの公式ドキュメント\"\n      }), \"で依存関係を確認する。それにより、以下のバージョンをインストールすると良いことがわかった。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"cuDNN 7.6\\nCUDA 10.1\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これらのバージョンはUbuntu20.04LTS向けのものが存在せず、Ubuntu18.04LTS向けのものをインストールした。現時点でエラーは起こっていないが将来問題が発生する可能性もある。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"tensorflowのインストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#tensorflowのインストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"tensorflowのインストール\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここは楽をしてpipからインストールしてしまう。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ pip \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" tensorflow-gpu\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また、GPUが利用可能か否かは、以下のpythonコマンドで確認可能。\\n末尾に\", _jsx(_components.code, {\n        children: \"True\"\n      }), \"か\", _jsx(_components.code, {\n        children: \"False\"\n      }), \"が出力されており、\", _jsx(_components.code, {\n        children: \"True\"\n      }), \"であれば環境構築成功といえる。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"import\"\n        }), \" tensorflow \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"as\"\n        }), \" tf\\ntf\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"test\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"is_gpu_available \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"nvidiaドライバのインストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#nvidiaドライバのインストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"NVIDIAドライバのインストール\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OSセットアップ時にインストールされているものとして省略。\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"cudaのインストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#cudaのインストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CUDAのインストール\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.nvidia.com/cuda-10.1-download-archive-base\",\n        children: \"公式ダウンロードページ\"\n      }), \"を開き、以下の順で選択する。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Linux > x86_64 > Ubuntu > 18.04 > deb [local]\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Download Installer ... x86_64\"\n      }), \"内にある\", _jsx(_components.code, {\n        children: \"Download\"\n      }), \"をクリックし、\", _jsx(_components.code, {\n        children: \"\\\\*.deb\"\n      }), \"ファイルをダウンロード。\\n同枠内に記述してあるインストール手順通りにしてもよいが、面倒なので\", _jsx(_components.code, {\n        children: \"Ubuntu Software\"\n      }), \"によってインストールした。\\n\", _jsx(_components.code, {\n        children: \"Files\"\n      }), \"から\", _jsx(_components.code, {\n        children: \"\\\\*.deb\"\n      }), \"をクリックしてInstallボタンをクリックするとインストールしてくれる。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"cudnnのインストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#cudnnのインストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"cuDNNのインストール\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.nvidia.com/rdp/cudnn-download\",\n        children: \"公式ダウンロードページ\"\n      }), \"で該当するバージョンのcuDNNを探してダウンロードする。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最初に表示される文には含まれていないので、過去に遡る必要がある。そのために、\", _jsx(_components.code, {\n        children: \"Archived cuDNN Release\"\n      }), \"をクリック。\\n\", _jsx(_components.code, {\n        children: \"Download cuDNN v7.6.X ..., for CUDA 10.1\"\n      }), \"をクリックしてプルダウンを表示。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Library for ..., Ubuntu ...\"\n      }), \"内にある該当\", _jsx(_components.code, {\n        children: \"\\\\*.deb\"\n      }), \"ファイルをダウンロードする。\\n必須なものが以下。サンプルは必要に応じてダウンロード。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"cuDNN Runtime Library for Ubuntu 18.04 [Deb]\\ncuDNN Developer Library for Ubuntu 18.04 [Deb]\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"CUDA同様、\", _jsx(_components.code, {\n        children: \"Files\"\n      }), \"でクリックしてインストールする。このとき、\", _jsx(_components.code, {\n        children: \"Runtime Library\"\n      }), \"がインストールされていないと\", _jsx(_components.code, {\n        children: \"Developer Library\"\n      }), \"が依存エラーになるので順番に注意。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"その他パッケージのインストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#その他パッケージのインストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"その他パッケージのインストール\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"前述したGPU利用可否を確認したところ、Falseとなっていたが、足りないものは\\n\", _jsx(_components.code, {\n        children: \"Could not load dynamic library <package-name>\"\n      }), \"のように表示されている。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcudart10.1\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcublas10\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcufft10\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcurand10\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcusolver10\\n$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sudo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"apt\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"install\"\n        }), \" libcusparse10\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"私の環境では以上でGPUが利用可能になった。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"UbuntuにtensorflowのGPU環境をセットアップ","date":"2020-10-29T13:43:38+09:00","description":"Ubuntuに簡単にTensorflowのGPU環境をセットアップする方法","tags":["ubuntu","tensorflow","gpu","nvidia"]}},"__N_SSG":true}