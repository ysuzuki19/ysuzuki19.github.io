{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"本題","slug":"本題","lvl":2,"i":1},{"content":"ベース","slug":"ベース","lvl":3,"i":2},{"content":"struct の準備","slug":"struct-の準備","lvl":3,"i":3},{"content":"コンストラクタ（？）","slug":"コンストラクタ","lvl":3,"i":4},{"content":"Private","slug":"private","lvl":3,"i":5},{"content":"Public","slug":"public","lvl":3,"i":6},{"content":"ためしに使ってみる","slug":"ためしに使ってみる","lvl":3,"i":7},{"content":"おわりに","slug":"おわりに","lvl":2,"i":8},{"content":"参考","slug":"参考","lvl":2,"i":9}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    div: \"div\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Golang を以前学び，少しだけ LeetCode を解くことで嗜んでいたが，プロダクト開発に向けたコーディングをしてこなかった．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"なので，残念ながら以前学んだ内容をほとんど忘れてしまっていた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そんな中，Web 開発のバックエンドに Golang を使おうと思い立ち，「適当に関数だけで作っちゃお！」などと甘いことを考えていた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし，そんな甘くはなく，当初思っていたよりも複雑なプログラムになりそうなので，以前 LeetCode を通じて学んだ Golang の諸々を思い出そうと思い，せっかくなのでメモ書きとして本ページに記すことにした．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"本題\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#本題\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"本題\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ベース\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ベース\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ベース\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"いきなりタイトルを否定するようだが，Golang には \", _jsx(_components.code, {\n        children: \"class\"\n      }), \" というものはなく，オブジェクト（？）は全て \", _jsx(_components.code, {\n        children: \"struct\"\n      }), \" として定義する．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"struct-の準備\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#struct-の準備\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"struct の準備\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，\", _jsx(_components.code, {\n        children: \"struct\"\n      }), \"において，メンバの命名は大きな意味を持ち，lowerCamelCase は Private，UpperCamelCase は Public といった具合である．\\nつまり，外部からアクセスしたいものは全て大文字から始まる命名にする必要がある．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"このルールは変数のみならずメソッドにも適用される．これが，Golang のライブラリのメソッドが大文字から始まる所以である（嬉しいような悲しいような・・・）．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"type\"\n        }), \" Human \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  Name \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), \"\\n  Age \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"コンストラクタ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コンストラクタ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コンストラクタ（？）\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Golang では，クラスを生成するために，\", _jsx(_components.code, {\n        children: \"New()\"\n      }), \"/\", _jsx(_components.code, {\n        children: \"NewXxx()\"\n      }), \"のようなものが準備されている事が多い．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"New()\"\n      }), \"にするか\", _jsx(_components.code, {\n        children: \"NewXxx()\"\n      }), \"にするかの選択について，package 内に一つしかクラスや\", _jsx(_components.code, {\n        children: \"New()\"\n      }), \"が存在しない場合と，package 名が表しているクラスは前者がいいと思うが，そうでない場合は\", _jsx(_components.code, {\n        children: \"NewXxx()\"\n      }), \"の形式が良いと思われる．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"例えば，\", _jsx(_components.code, {\n        children: \"list\"\n      }), \"というパッケージがあり，\", _jsx(_components.code, {\n        children: \"List\"\n      }), \"クラスを生成する関数を作る場合に\", _jsx(_components.code, {\n        children: \"New()\"\n      }), \"を選ぶと，\", _jsx(_components.code, {\n        children: \"list.New()\"\n      }), \"と呼べるのに対し，\", _jsx(_components.code, {\n        children: \"NewList()\"\n      }), \"としてしまうと\", _jsx(_components.code, {\n        children: \"list.NewList()\"\n      }), \"という冗長なコードになってしまう．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"さらに，\", _jsx(_components.code, {\n        children: \"ListNode\"\n      }), \"というクラスも内包している可能性があるが，そちらの方は内部で使われるため，\", _jsx(_components.code, {\n        children: \"NewListNode()\"\n      }), \"で良さそうである．逆に\", _jsx(_components.code, {\n        children: \"New()\"\n      }), \"にしてしまうと，\", _jsx(_components.code, {\n        children: \"list.New()\"\n      }), \"で\", _jsx(_components.code, {\n        children: \"List\"\n      }), \"クラスではなく\", _jsx(_components.code, {\n        children: \"ListNode\"\n      }), \"クラスが生成されるという，不自然な状態になってしまう．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// NewHumanでもよさそう\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"New\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"name \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" age \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"int\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"Human \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), \"Human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは命名規則により，外部から呼ぶことができる．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"private\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#private\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Private\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述の通り，lowerCamelCase にするだけで Private となる．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"this \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"Human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"isMinnor\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"bool\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"return\"\n        }), \" age \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"20\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"public\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#public\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Public\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述の通り，（略\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"this \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"Human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Grow\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  this\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"++\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"this \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"Human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Rename\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"name \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  this\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" name\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ためしに使ってみる\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ためしに使ってみる\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ためしに使ってみる\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"main.go\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" main \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\\thuman \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":=\"\n        }), \" utils\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"New\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"ysuzuki\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"25\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\tfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\thuman\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Grow\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\tfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\thuman\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Rename\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"ysato\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\tfmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Println\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Age\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"歳の\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" human\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Name\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"です!\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"output\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"ysuzuki \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"25\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"&\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"ysuzuki \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"26\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"26\"\n        }), \" 歳の ysato です\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Golang を思い出せたので，良い機会になった．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"自分のコード参考にしちゃった\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/ysuzuki19/leetcode/blob/main/707-design-linked-list/main.go\",\n          children: \"https://github.com/ysuzuki19/leetcode/blob/main/707-design-linked-list/main.go\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"golangにおけるクラス開発の基礎","date":"2021-11-20T00:56:46","description":"メソッドなどの基礎的なものです","tags":["go","golang","class","struct","design"]}},"__N_SSG":true}