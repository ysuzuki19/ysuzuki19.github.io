{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"コマンドの終了ステータスによる分岐方法","slug":"コマンドの終了ステータスによる分岐方法","lvl":2,"i":1},{"content":"おわりに","slug":"おわりに","lvl":2,"i":2},{"content":"参考","slug":"参考","lvl":2,"i":3}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本ブログは Github Pages でホスティングしており， デプロイはスクリプトにより行っている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そして，最近ユニットテストを追加したので，デプロイ前に必ずテストを行い，テストが失敗したらデプロイしないようなスクリプトにする必要があった．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"コマンドの終了ステータスによる分岐方法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#コマンドの終了ステータスによる分岐方法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"コマンドの終了ステータスによる分岐方法\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私の場合は，分岐するコマンドは\", _jsx(_components.code, {\n        children: \"npm test\"\n      }), \"にした．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"他のコマンドによって分岐したい場合は，\", _jsx(_components.code, {\n        children: \"npm test\"\n      }), \"の部分を書き換えるとよい．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"deploy.sh\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"token shebang important\",\n          children: \"#!/bin/bash\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" -e \", _jsxs(_components.span, {\n          className: \"token string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\033\",\n            children: \"\\\\033\"\n          }), \"[0;32mDeploying updates to GitHub...\", _jsx(_components.span, {\n            className: \"token entity\",\n            title: \"\\\\033\",\n            children: \"\\\\033\"\n          }), \"[0m\\\"\"]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"test\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"then\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# テストに失敗するとここに入る\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'Test was failed'\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"exit\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"fi\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# テストに成功\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"echo\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'Test was passed'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# ここにデプロイする処理を書いている\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，ネガポジを変える必要があれば\", _jsx(_components.code, {\n        children: \"if npm test; then\"\n      }), \"のように\", _jsx(_components.code, {\n        children: \"!\"\n      }), \"を削除するとよい．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"安心してデプロイできるようにしたいです．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/questions/26675681/how-to-check-the-exit-status-using-an-if-statement\",\n          children: \"https://stackoverflow.com/questions/26675681/how-to-check-the-exit-status-using-an-if-statement\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"コマンドの終了ステータスで分岐する方法","date":"2021-06-13T22:51:54","description":"shell-scriptで，特定のコマンドの終了ステータスで分岐する","tags":["bash","shell"]}},"__N_SSG":true}