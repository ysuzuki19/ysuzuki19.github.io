{"pageProps":{"toc":[{"content":"HUGO とは","slug":"hugo-とは","lvl":2,"i":0},{"content":"プレビュー方法","slug":"プレビュー方法","lvl":2,"i":1}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"hugo-とは\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#hugo-とは\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"HUGO とは\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HUGO とは SSG(Static Site Generator)の一つで，GO 言語で開発されている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SSG とは：日本語では静的サイトジェネレータと呼ばれ，その名の通り静的なサイトを生成するツールである．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"HUGO では，サイトを生成する以外にも，html を生成する前の markdown で記述された記事をローカルホストを立てることでプレビューすることができる．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"他の SSG でも言えることだが，静的サイトを使うため Github Pages と組み合わせることができ，とても便利である．このページも Github Pages x HUGO で作成している．Github x HUGO の環境の構築手順は\", _jsx(_components.a, {\n        href: \"https://ysuzuki19.github.io/2019/04/19/hugosetupmemo/\",\n        children: \"こちら\"\n      }), \"で紹介した．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"プレビュー方法\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#プレビュー方法\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"プレビュー方法\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ターミナルを開いて，\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$ hugo server\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"というコマンドを実行し，好きなブラウザを起動して URL 欄に\", _jsx(_components.code, {\n        children: \"localhost:1313\"\n      }), \"と入力するとページのプレビューが見られる．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"テーマを指定してプレビューしたい場合は，\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"$ hugo server -D -t [theme name]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"とするとよい．\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"HUGOの簡単な使い方","date":"2019-04-18T23:28:02+09:00","description":"後から使う用","tags":["hugo","ssg"]}},"__N_SSG":true}