{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"使い方","slug":"使い方","lvl":2,"i":1},{"content":"インストール","slug":"インストール","lvl":3,"i":2},{"content":"プロジェクトの作成","slug":"プロジェクトの作成","lvl":3,"i":3},{"content":"生成されたファイル","slug":"生成されたファイル","lvl":3,"i":4},{"content":"モジュールの追加","slug":"モジュールの追加","lvl":3,"i":5},{"content":"当初気になった点","slug":"当初気になった点","lvl":2,"i":6},{"content":"Angular 使いじゃないと恩恵が薄いの？","slug":"angular-使いじゃないと恩恵が薄いの","lvl":3,"i":7},{"content":"Express とどっちがいいの？","slug":"express-とどっちがいいの","lvl":3,"i":8},{"content":"Next.js の API Route でいいんじゃない？","slug":"nextjs-の-api-route-でいいんじゃない","lvl":3,"i":9},{"content":"Go とか使わないの？","slug":"go-とか使わないの","lvl":3,"i":10},{"content":"おわりに","slug":"おわりに","lvl":2,"i":11},{"content":"参考","slug":"参考","lvl":2,"i":12}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/post/nestjs-cource2-rest-api\",\n        children: \"次記事\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"NestJS とは，Node.js のバックエンドフレームワークである．以下，\", _jsx(_components.a, {\n        href: \"https://docs.nestjs.com\",\n        children: \"公式ドキュメント\"\n      }), \"を参考に紹介．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NestJS は効率的でスケーラブルな Node.js のサーバサイドアプリケーションを開発するためのフレームワークとされている．また，TypeScript を完全にサポートしており，OOP/FP/FRP の要素を組み合わせている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また NestJS では，好みによって Node.js 製 Web フレームワークである Express/Fastify を使い分けることが可能．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NestJS の生まれた背景としては，Node.js のおかげで JS がフロントエンド・バックエンドの共通言語となった事が挙げられ，これにより様々な SPA ライブラリ・フレームワークが発展した一方で，バックエンドに対しても便利なライブラリやツールは存在するものの，主にアーキテクチャの効率性は改善されていないとされている．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"そこで NestJS はフレームワーク自体が開発者にテスタビリティ・スケーラビリティ・疎結合・メンテナビリティを提供できるように設計されている．また，NestJS は Angular に多くの影響を受けている．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"使い方\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#使い方\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"使い方\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"インストール\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#インストール\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"インストール\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"npm\"\n      }), \"を用いて CLI ツールをグローバルインストールする．\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"npm\"\n        }), \" i -g @nestjs/cli\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"プロジェクトの作成\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#プロジェクトの作成\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"プロジェクトの作成\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CLI を用いるとコマンド一発でプロジェクトをセットアップ可能．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$ nest new my-project\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここで，使いたいパッケージマネージャを選択する．（僕は npm）\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"生成されたファイル\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#生成されたファイル\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"生成されたファイル\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CLI によって，eslint/prettier/tsconfig 等の設定ファイルは自動的に生成される．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実際に開発を進める上では，\", _jsx(_components.code, {\n        children: \"src\"\n      }), \"をいじっていく．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"main.ts\"\n      }), \"には NestJS におけるおまじないが書かれている．ポートの変更や cookie-parser 等を用いたい場合はここに追記する．Express における\", _jsx(_components.code, {\n        children: \"app.use(...)\"\n      }), \"の記述はこのファイルに書く．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"src/main.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NestFactory\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'@nestjs/core'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppModule\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'./app.module'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"async\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"bootstrap\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" app \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"NestFactory\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"create\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"AppModule\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// app.user(...)が追記可能\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// ポート3000を利用する\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" app\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"listen\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"bootstrap\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"main.ts\"\n      }), \"以外のファイルは\", _jsx(_components.code, {\n        children: \"<name>.<schematic>.ts\"\n      }), \"のような命名規則で保存するようになっている．\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"app.module.ts\"\n        }), \":アプリケーション全体のモジュール．モジュールを追加する場合，ここに追加することで，モジュールをアプリケーションに設定できる．\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"app.controller.ts\"\n        }), \": REST API のエンドポイント\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"app.service.ts\"\n        }), \":REST API の処理部\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Front からのアクセスの流れは，\", _jsx(_components.code, {\n        children: \"app.controller\"\n      }), \"→ \", _jsx(_components.code, {\n        children: \"app.service\"\n      }), \"の流れである．\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"src/app.module.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Module\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'@nestjs/common'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppController\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'./app.controller'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppService\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'./app.service'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsxs(_components.span, {\n          className: \"token decorator\",\n          children: [_jsx(_components.span, {\n            className: \"token at operator\",\n            children: \"@\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"Module\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// AppModuleで利用する他のModuleをセット\"\n        }), \"\\n  imports\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// AppModuleで利用するControllerをセット\"\n        }), \"\\n  controllers\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"AppController\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// AppModuleで利用するProviderをセット\"\n        }), \"\\n  providers\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"AppService\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 外部から利用させる処理をセット\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// exports: []\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppModule\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"src/app.controller.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Controller\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Get\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'@nestjs/common'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppService\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'./app.service'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsxs(_components.span, {\n          className: \"token decorator\",\n          children: [_jsx(_components.span, {\n            className: \"token at operator\",\n            children: \"@\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"Controller\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppController\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// AppModuleのprovidersにセットされたServiceがInjectされており，constructorで受け取る\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// appServiceはAppServiceのインスタンスとして使うことが出来る\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"constructor\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"private\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"readonly\"\n        }), \" appService\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"AppService\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// `localhost:3000/` に対するGETメソッドを割り当てる\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// @Get('hello')とすると `localhost:3000/hello` に割り当てる\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// 他のメソッドには@Post/@Put/@Deleteのように別で割当可能\"\n        }), \"\\n  \", _jsxs(_components.span, {\n          className: \"token decorator\",\n          children: [_jsx(_components.span, {\n            className: \"token at operator\",\n            children: \"@\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"Get\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"getHello\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// AppService.getHello()の結果をレスポンスとして返す\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"this\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"appService\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"getHello\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"src/app.service.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"import\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token imports\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Injectable\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          })]\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'@nestjs/common'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Inject可能なクラスをつくる\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token decorator\",\n          children: [_jsx(_components.span, {\n            className: \"token at operator\",\n            children: \"@\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"Injectable\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword module\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"AppService\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"getHello\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'Hello World!'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ここで，\", _jsx(_components.code, {\n        children: \"app.controller.ts\"\n      }), \",\", _jsx(_components.code, {\n        children: \"app.service.ts\"\n      }), \"に関してはサンプルプロジェクトには含まれているものの，これらは実際にアプリケーションを開発する上では，多くの場合は削除することをおすすめする．(次項につづく)\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"モジュールの追加\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#モジュールの追加\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"モジュールの追加\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"実際のアプリケーションにおいては\", _jsx(_components.code, {\n        children: \"user\"\n      }), \"や\", _jsx(_components.code, {\n        children: \"todo\"\n      }), \"のように用途ごとにエンドポイントを設定したい場合が多いと思う．その際に\", _jsx(_components.code, {\n        children: \"app.controller.ts\"\n      }), \"のような命名で運用すると，粗結合にならない．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"そこで，\", _jsx(_components.code, {\n        children: \"src/user/user.module.ts\"\n      }), \", \", _jsx(_components.code, {\n        children: \"src/user/user.controller.ts\"\n      }), \", \", _jsx(_components.code, {\n        children: \"src/todo/todo.module.ts\"\n      }), \"のようなディレクトリ構成にすると，用途ごとに処理を分離することが可能である．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"今回は長くなってしまうので省くが，今後別の記事で書いて行ければと思っている．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"当初気になった点\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#当初気になった点\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"当初気になった点\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"利用当初に気になりながら学習を進めた疑問点に対し，ある程度の知識をつけた\\\"今の\\\"自分なりのこたえを残しておく．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"angular-使いじゃないと恩恵が薄いの\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#angular-使いじゃないと恩恵が薄いの\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Angular 使いじゃないと恩恵が薄いの？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"私は以前 Angular をちょびっと触ったことが合ったが，TS 自体は全体を通して React 中心に関わっており，Next.js 辺りを扱っていた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"公式ドキュメントを少し見たところ，「Angular にめっちゃ似てるじゃん！」と思ったし，フレームワークの Module の書き方等で酷似している点も多々ある．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし，それは「Angular が得意な人じゃないとかけない」というわけではなく，「Angular と同じような書き方でバックエンドを書く」という印象がある．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React での開発と NestJS との開発を並行しても特段頭の切り替えが必要になることはない．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"express-とどっちがいいの\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#express-とどっちがいいの\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Express とどっちがいいの？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"バックエンドで Node.js を使うことを決めた上で Express/NestJS で迷った．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"選定基準における注意点だが，選定中の自分は，とても間抜けで\", _jsx(_components.code, {\n        children: \"npm trends\"\n      }), \"で Express/NestJS の比較などを行っていた．NestJS の内部では Express/Fastify が使われているためこれは全く意味がなく，NestJS が伸びれば自然と Express も伸びるので比較対象としては正しくない．これを比較するのは，react/next.js の DL 数を比較するようなものである．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Express は書き方が多数存在するようで，構成や設計に対し先人の知恵を活かしたければそれだけ動向を調べる必要があるように感じた．そのため，初期段階から設計にある程度の縛りがあり，公式ドキュメントおよびパッケージが充実している NestJS を選んだ．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，NestJS の推しポイントである粗結合というのが，動作速度のボトルネックを切り分けて別言語にできるのではという淡い期待から，他言語への部分的な移行を考え，NestJS に魅力を感じた．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"nextjs-の-api-route-でいいんじゃない\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#nextjs-の-api-route-でいいんじゃない\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Next.js の API Route でいいんじゃない？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React→Next.js の順に学んでみると，なんともスムーズに フロントエンド開発からバックエンドへの接続ができる．Next.js の SSR/SSG/ISR は素晴らしいし，API Route(ディレクトリベースの API)も手軽で素晴らしい．\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"一応断っておくが，私は Next.js は愛用しているが，API Route は入門程度でほとんど使ったことがないため，公平ではないかもしれない\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"思うに，「AWS Lambda を JSON サーバとして運用するぞ！」と言ったモチベーションの場合は NestJS を使うよりも API Route を使ったほうが学習効率・デプロイの簡易性・CICD の容易な構築と，多くの恩恵を Vercel から受けられることは間違いない．そして，API Middleware などでどんどん拡張性が向上しているように見える．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"しかし，複雑な機能を持つバックエンドを構築したいのであれば，NestJS の方がそちらに重点を置いており，フレームワークとしてのサポートが豊富である．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これに関しては，やりたい事や用途，開発体制で検討する余地があるだろう．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"go-とか使わないの\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#go-とか使わないの\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Go とか使わないの？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NestJS がいいなと思った直前，Golang を触っていたため，自分の中でそこは本当に迷ったところであった．また，最近存在感がましてきている Rust にも惹かれていた(Rust はその後軽く学習した)．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここは考え方の違いとなるだろうが，「開発時に発生する頭の切り替えを可能な限り減らす」という事を重視したため NestJS（Node.js）を選んだ．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これに関しては開発に関わる人数や体制が影響すると思う．個人開発等で全て自分が関わる必要がある場合は，Front/Back 両方に関わるため，両者を行き来する上での頭の切り替えが発生することが，開発の進行上，および精神衛生上良くないと感じた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"仮に開発にかかる人数が多くて Front/Back を専任のエンジニアが携わる場合は，より高速な言語を選定するのも良い選択だと思うし，部分的に高速化を果たすために Golang や Rust 等を選ぶのも良い選択だと思う．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NestJS いいですねぁ！\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.nestjs.com\",\n          children: \"https://docs.nestjs.com\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"NestJS 入門コース１ 概略","date":"2022-03-08T23:35:19","description":"NestJSを始めるか悩んでいる人に読んでほしいページ","tags":["nodejs","nestjs","javascript","typescript"]}},"__N_SSG":true}