{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    span: \"span\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"features-page\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#features-page\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Features Page\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to the features page\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"本ページについて\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#本ページについて\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"本ページについて\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本ページでは，本ブログに搭載した機能について紹介します．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本ブログを読んでくださる方というよりは，開発者の参考になればと考えています．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next.js でブログを作ることを考えている方はご参考にしてみてください．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"気が向くごとに更新します．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"利用技術\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#利用技術\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"利用技術\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"本ブログは，以下の技術を利用して作っている(左項目は適当)．\"\n    }), \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"用途/機能/分類\"\n          }), _jsx(_components.th, {\n            children: \"技術など\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Language\"\n          }), _jsx(_components.td, {\n            children: \"TypeScript\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Library\"\n          }), _jsx(_components.td, {\n            children: \"React\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Framework\"\n          }), _jsx(_components.td, {\n            children: \"Next.js\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"UI\"\n          }), _jsx(_components.td, {\n            children: \"MUI\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Hosting\"\n          }), _jsx(_components.td, {\n            children: \"Github Pages\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Testing\"\n          }), _jsx(_components.td, {\n            children: \"Jest\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"render mdx\"\n          }), _jsx(_components.td, {\n            children: \"next-mdx-remote\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"また，ここに書ききれていないライブラリ等は\", _jsx(_components.a, {\n        href: \"/libraries\",\n        children: \"こちら\"\n      }), \"に記載した．\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"機能一覧\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#機能一覧\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"機能一覧\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"記事レンダリング\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#記事レンダリング\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"記事レンダリング\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"特徴\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#特徴\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"特徴\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"TOC (Table of Content)を右に配置\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"記事に紐付けられたタグを一覧表示（各タグへのリンク付き）\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"mdx-のコンポーネント設定\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#mdx-のコンポーネント設定\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"mdx のコンポーネント設定\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"next-mdx-remote のコンポーネントの設定で，大まかに以下の設定を行った．\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"anchor の設定(TOC からジャンプできる)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"code block のシンタックスハイライト\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"内部リンクと外部リンクの区別(new tab で開く)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"記事生成スクリプト\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#記事生成スクリプト\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"記事生成スクリプト\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これは，Node ではなく ShellScript で解決しています．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ページネーション\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#ページネーション\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"ページネーション\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ページ分割には，\", _jsx(_components.code, {\n        children: \"[slug].tsx\"\n      }), \"とは別に\", _jsx(_components.code, {\n        children: \"[id].tsx\"\n      }), \"という動的ルーティングを準備し，自作しました．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ページ移動ボタン表示には Tailwind のサンプルを改造して作成しました．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"タグ機能\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#タグ機能\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"タグ機能\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"MDX の \", _jsx(_components.code, {\n        children: \"articlemeta\"\n      }), \"に\", _jsx(_components.code, {\n        children: \"tags\"\n      }), \"という名前を追加し，また，各記事に\", _jsx(_components.code, {\n        children: \"tags\"\n      }), \"というメタデータを追加した上で，記事レンダリング部にタグ一覧を表示．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"次に，\", _jsx(_components.code, {\n        children: \"/tag/[id]\"\n      }), \"というエンドポイントを準備し，該当するタグを持つ記事を一覧できるようにした．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"タグのチップに\", _jsx(_components.code, {\n        children: \"/tag/[id]\"\n      }), \"へのリンクを挿入して，移動を便利にした．\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"今回は開発速度を考慮して暫定的にこのような構成にしたが，今後タグの絞り込み機能を導入する必要があれば，\", _jsx(_components.code, {\n        children: \"/tags=[tagname]\"\n      }), \"のように複数タグを選択できるようにしていく必要があるかもしれない．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，ブログのルートに，LatestPost だけでなく FrequentTags を表示した．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"この FrequentTags について，\", _jsx(_components.code, {\n        children: \"getTagsByThreshold(threshold:number):string[]\"\n      }), \"として，タグリスト取得関数を用意し，コンテンツの増加に耐えられる(コンテンツ増加に対し，使われるタグも増えるので，それに合わせてスレッショルドを変動させられる)ように設計してある．\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"検索機能\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#検索機能\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"検索機能\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これに関しては，作れそうだったので自作した．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Github Pages で公開する Web サイトは静的サイトなので，デプロイする時点ですべての掲載内容は既知である．\\nつまり，インデクシングをデプロイ前にしてしまえばよいということである．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"インデクシングする際には，まず，日/英を分類し，日本語であれば形態素解析から名詞を抽出した．その後，日/英に対してあらかじめ定めたストップワードをフィルタとしてかけ，登場回数を記録した．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ここまでで，各文書にどの単語が何回出現するかが得られた．それは同時に，各単語がどの文書に何回出現するか得られたということを意味する．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"検索クエリは訪問者が入力するので，コントロールドなテキストエリアを準備し，それを基に予めインデクシングされたデータから検索する．当初はエンターやアイコンクリックで検索を実行していたが，便利にするためにリアルタイム検索を提供している．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"私の方法では，\", _jsx(_components.code, {\n        children: \"C++\"\n      }), \"などの記号を含むことで意味のある単語が抜け落ちるという弱点があるので，\", _jsx(_components.code, {\n        children: \"n-gram\"\n      }), \"を使うのもよい手段だと思う．しかし，開発期間の都合上，今回はシンプルな検索エンジンを作った．(今後 n-gram のバージョンも考え，性能に応じてハイブリッドで考えていきたい)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，タイポに対応するためにも，ファジーな検索を提供するのも本来ならすべきと考えている．（が，個人ブログで曖昧な検索するか一考の余地がある）\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"tags-sphere\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#tags-sphere\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Tags Sphere\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"タグ機能を追加する時に作成した関数等を用いて，すべてのタグを取得後，\", _jsx(_components.code, {\n        children: \"react-three-fiber\"\n      }), \"を使って\", _jsx(_components.code, {\n        children: \"three.js\"\n      }), \"の Canvas 上にタグリストを描いた．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"タグを球状に散らばらせ，それを一定速度で回転させた．\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"また，マウスを用いた回転・移動・拡大縮小もできるようにした．\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"about-や-features-などの特殊ページ\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#about-や-features-などの特殊ページ\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"About や Features などの特殊ページ\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最初は\", _jsx(_components.code, {\n        children: \"pages/about.tsx\"\n      }), \"および\", _jsx(_components.code, {\n        children: \"pages/features.tsx\"\n      }), \"を準備し，そこに JSX ベタ書きしていたが，\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"保守性を考慮して mdx で書けるようにした．\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"具体的には，\", _jsx(_components.code, {\n        children: \"documents/about.mdx\"\n      }), \"および\", _jsx(_components.code, {\n        children: \"documents/features.mdx\"\n      }), \"を配置し，それらを上記２ファイルから読み込んで表示した．\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}