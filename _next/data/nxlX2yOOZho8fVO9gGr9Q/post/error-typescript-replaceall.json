{"pageProps":{"toc":[{"content":"はじめに","slug":"はじめに","lvl":2,"i":0},{"content":"エラー内容","slug":"エラー内容","lvl":2,"i":1},{"content":"regex 使うことにした","slug":"regex-使うことにした","lvl":2,"i":2},{"content":"おわりに","slug":"おわりに","lvl":2,"i":3},{"content":"参考","slug":"参考","lvl":2,"i":4}],"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    div: \"div\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"はじめに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#はじめに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"はじめに\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ts で開発をしていて，\", _jsx(_components.code, {\n        children: \"string\"\n      }), \"の補完に\", _jsx(_components.code, {\n        children: \"replaceAll\"\n      }), \"が出てくるのに対し，実行時に思わぬエラーが発生する問題が発生した．\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ブラウザの種類やバージョンなどの要因が考えられると思うが，取り敢えずトラブルだけを最短で解消する方法を記す．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"エラー内容\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#エラー内容\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"エラー内容\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsxs(_components.code, {\n        className: \"language-bash\",\n        children: [\"TypeError: word.replaceAll is not a \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"function\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"regex-使うことにした\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#regex-使うことにした\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"regex 使うことにした\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vim を使っていたり，なんかのバリデーションに使ったことがあったので，それほど難なく regex が読めたので，すぐに解決できた．\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"before\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [\"word\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"replaceAll\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'hoge'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'fuga'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"after\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-typescript\",\n      children: _jsxs(_components.code, {\n        className: \"language-typescript\",\n        children: [\"word\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token method function property-access\",\n          children: \"replace\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsxs(_components.span, {\n          className: \"token regex\",\n          children: [_jsx(_components.span, {\n            className: \"token regex-delimiter\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token regex-source language-regex\",\n            children: \"hoge\"\n          }), _jsx(_components.span, {\n            className: \"token regex-delimiter\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token regex-flags\",\n            children: \"g\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'fuga'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"おわりに\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#おわりに\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"おわりに\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"開発が落ち着いたら根本的な解決を目指したい．\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"参考\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#参考\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"参考\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\",\n          children: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.designcise.com/web/tutorial/how-to-fix-replaceall-is-not-a-function-javascript-error\",\n          children: \"https://www.designcise.com/web/tutorial/how-to-fix-replaceall-is-not-a-function-javascript-error\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"scope":{"title":"typescriptのreplaceAllが出来ないときの逃避","date":"2021-06-23T23:50:20","description":"regexを使います","tags":["typescript","error","regex"]}},"__N_SSG":true}